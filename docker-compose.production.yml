# Ashley AI - Production Docker Compose
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ashley-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ashley_ai_prod
      POSTGRES_USER: ashley_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    networks:
      - ashley-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ashley_admin -d ashley_ai_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ashley-ai-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ashley-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ashley AI Admin Application
  ash-admin:
    build:
      context: .
      target: runner
    container_name: ashley-ai-admin
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://ashley_admin:${POSTGRES_PASSWORD}@postgres:5432/ashley_ai_prod
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: https://${DOMAIN}
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ashley-ai-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ashley AI Client Portal
  ash-portal:
    build:
      context: .
      target: runner
    container_name: ashley-ai-portal
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://ashley_admin:${POSTGRES_PASSWORD}@postgres:5432/ashley_ai_prod
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: https://portal.${DOMAIN}
      PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ashley-ai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ashley-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - ash-admin
      - ash-portal
    networks:
      - ashley-ai-network

  # Database backup service
  backup:
    image: postgres:15-alpine
    container_name: ashley-ai-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh
    networks:
      - ashley-ai-network
    depends_on:
      - postgres
    entrypoint: ["/backup.sh"]

volumes:
  postgres_data:
  redis_data:

networks:
  ashley-ai-network:
    driver: bridge