name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  # Job 1: Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    services:
      # PostgreSQL for testing
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ashley_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      # Redis for testing
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ashley_ai_test
      REDIS_URL: redis://localhost:6380
      JWT_SECRET: test_jwt_secret_for_ci
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/database
          npx prisma generate

      - name: Run database migrations
        run: |
          cd packages/database
          npx prisma migrate deploy

      - name: Seed test database
        run: npx tsx tests/setup/seed-test-db.ts

      - name: Run unit tests
        run: pnpm test:unit -- --ci --coverage

      - name: Run integration tests (mock)
        run: pnpm test:integration -- --ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-ashley-ai

  # Job 2: E2E Tests with Real Server
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ashley_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ashley_ai_test
      REDIS_URL: redis://localhost:6380
      JWT_SECRET: test_jwt_secret_for_ci
      NODE_ENV: test
      PORT: 3001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/database
          npx prisma generate

      - name: Run database migrations
        run: |
          cd packages/database
          npx prisma migrate deploy

      - name: Seed test database
        run: npx tsx tests/setup/seed-test-db.ts

      - name: Build application
        run: pnpm --filter @ash/admin build

      - name: Start test server
        run: |
          pnpm --filter @ash/admin start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ashley_ai_test

      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
              echo "Server is ready!"
              exit 0
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
          echo "Server failed to start"
          exit 1

      - name: Run E2E tests
        run: pnpm test:e2e -- --ci

      - name: Run real API integration tests
        run: pnpm test tests/integration/api-real.test.ts -- --ci

  # Job 3: Security Tests
  security-test:
    name: Security Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ashley_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ashley_ai_test
      REDIS_URL: redis://localhost:6380
      JWT_SECRET: test_jwt_secret_for_ci
      NODE_ENV: test
      PORT: 3001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd packages/database
          npx prisma generate

      - name: Run database migrations
        run: |
          cd packages/database
          npx prisma migrate deploy

      - name: Seed test database
        run: npx tsx tests/setup/seed-test-db.ts

      - name: Build application
        run: pnpm --filter @ash/admin build

      - name: Start test server
        run: |
          pnpm --filter @ash/admin start &
          sleep 10

      - name: Wait for server
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          exit 1

      - name: Run security tests
        run: pnpm test tests/security/ -- --ci

  # Job 4: Linting and Type Checking
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript type check
        run: pnpm type-check

  # Job 5: Playwright E2E Tests
  playwright-e2e:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ashley_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ashley_ai_test
      REDIS_URL: redis://localhost:6380
      JWT_SECRET: test_jwt_secret_for_ci
      NODE_ENV: test
      PORT: 3001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Generate Prisma Client
        run: |
          cd packages/database
          npx prisma generate

      - name: Run database migrations
        run: |
          cd packages/database
          npx prisma migrate deploy

      - name: Seed test database
        run: npx tsx tests/setup/seed-test-db.ts

      - name: Run Playwright E2E tests
        run: pnpm test:e2e:playwright

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 6: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, e2e-test, security-test, lint, playwright-e2e]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.test.result }}"
          echo "E2E Tests (Jest): ${{ needs.e2e-test.result }}"
          echo "E2E Tests (Playwright): ${{ needs.playwright-e2e.result }}"
          echo "Security Tests: ${{ needs.security-test.result }}"
          echo "Lint: ${{ needs.lint.result }}"

      - name: Fail if any test failed
        if: |
          needs.test.result == 'failure' ||
          needs.e2e-test.result == 'failure' ||
          needs.playwright-e2e.result == 'failure' ||
          needs.security-test.result == 'failure' ||
          needs.lint.result == 'failure'
        run: exit 1
