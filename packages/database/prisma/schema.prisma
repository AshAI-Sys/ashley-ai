generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                       String                   @id @default(cuid())
  name                     String
  slug                     String                   @unique
  settings                 String?
  is_active                Boolean                  @default(true)
  created_at               DateTime                 @default(now())
  updated_at               DateTime                 @updatedAt
  ai_analysis              AIAnalysis[]
  ai_chat_conversations    AIChatConversation[]
  ai_chat_knowledge        AIChatKnowledge[]
  ai_chat_suggestions      AIChatSuggestion[]
  ai_model_metrics         AIModelMetrics[]
  alerts                   Alert[]
  analytics_events         AnalyticsEvent[]
  assets                   Asset[]
  automation_executions    AutomationExecution[]
  automation_rules         AutomationRule[]
  brands                   Brand[]
  capa_tasks               CAPATask[]               @relation("WorkspaceCAPATasks")
  cartons                  Carton[]
  client_activities        ClientActivity[]
  client_messages          ClientMessage[]
  client_notifications     ClientNotification[]
  client_portal_settings   ClientPortalSettings[]
  client_sessions          ClientSession[]
  clients                  Client[]
  custom_reports           CustomReport[]
  customer_segments        CustomerSegment[]
  dashboard_widgets        DashboardWidget[]
  deliveries               Delivery[]
  demand_forecasts         DemandForecast[]
  design_analytics         DesignAnalytics[]
  design_workflows         DesignApprovalWorkflow[]
  design_approvals         DesignApproval[]         @relation("WorkspaceDesignApprovals")
  design_assets            DesignAsset[]
  design_collaborations    DesignCollaboration[]
  design_comments          DesignComment[]
  design_estimates         DesignCostEstimate[]
  design_validations       DesignFileValidation[]
  design_mockups           DesignMockup[]
  design_specs             DesignProductionSpec[]
  design_templates         DesignTemplate[]
  employees                Employee[]
  executive_dashboards     ExecutiveDashboard[]
  finished_units           FinishedUnit[]
  finishing_runs           FinishingRun[]
  integration_sync_logs    IntegrationSyncLog[]
  integrations             Integration[]
  inventory_insights       InventoryInsight[]
  machines                 Machine[]
  maintenance_schedules    MaintenanceSchedule[]
  market_trends            MarketTrend[]
  material_inventory       MaterialInventory[]
  material_requirements    MaterialRequirement[]    @relation("WorkspaceMaterialRequirements")
  material_transactions    MaterialTransaction[]    @relation("WorkspaceMaterialTransactions")
  suppliers                Supplier[]               @relation("WorkspaceSuppliers")
  purchase_orders          PurchaseOrder[]          @relation("WorkspacePurchaseOrders")
  auto_reorder_settings    AutoReorderSetting[]     @relation("WorkspaceAutoReorderSettings")
  notification_templates   NotificationTemplate[]
  notifications            Notification[]
  order_activity_logs      OrderActivityLog[]
  order_files              OrderFile[]
  orders                   Order[]
  piece_rates              PieceRate[]
  pod_records              PODRecord[]
  product_recommendations  ProductRecommendation[]
  production_heatmaps      ProductionHeatmap[]
  production_lines         ProductionLine[]
  production_progress_logs ProductionProgressLog[]  @relation("WorkspaceProductionProgressLogs")
  production_schedules     ProductionSchedule[]
  profit_analyses          ProfitAnalysis[]
  qc_defect_types          QCDefectType[]
  qc_defects               QCDefect[]               @relation("WorkspaceQCDefects")
  qc_inspection_points     QCInspectionPoint[]
  qc_inspections           QCInspection[]           @relation("WorkspaceQCInspections")
  quality_data_points      QualityDataPoint[]
  quality_metrics          QualityMetric[]
  quality_predictions      QualityPrediction[]
  report_executions        ReportExecution[]
  report_exports           ReportExport[]
  report_shares            ReportShare[]
  sewing_operations        SewingOperation[]
  shipments                Shipment[]
  users                    User[]
  work_orders              WorkOrder[]
  work_stations            WorkStation[]
  worker_allocations       WorkerAllocation[]       @relation("WorkspaceWorkerAllocations")
  worker_assignments       WorkerAssignment[]       @relation("WorkspaceWorkerAssignments")
  inventory_products       InventoryProduct[]
  store_locations          StoreLocation[]
  stock_ledger             StockLedger[]
  retail_sales             RetailSale[]
  warehouse_deliveries     WarehouseDelivery[]

  @@index([is_active])
  @@index([created_at])
  @@index([slug, is_active])
  @@map("workspaces")
}

model User {
  id                             String                  @id @default(cuid())
  workspace_id                   String
  email                          String
  username                       String?
  password_hash                  String?
  first_name                     String
  last_name                      String
  role                           String
  position                       String?
  department                     String?
  permissions                    String?
  is_active                      Boolean                 @default(true)
  requires_2fa                   Boolean                 @default(false)
  two_factor_secret              String?
  two_factor_enabled             Boolean                 @default(false)
  two_factor_backup_codes        String?
  phone_number                   String?
  avatar_url                     String?
  last_login_at                  DateTime?
  email_verified                 Boolean                 @default(false)
  email_verification_token       String?                 @unique
  email_verification_expires     DateTime?
  email_verification_sent_at     DateTime?
  password_reset_token           String?                 @unique
  password_reset_expires         DateTime?
  password_reset_sent_at         DateTime?
  created_at                     DateTime                @default(now())
  updated_at                     DateTime                @updatedAt
  deleted_at                     DateTime?
  ai_analysis                    AIAnalysis[]
  ai_chat_conversations          AIChatConversation[]    @relation("AIChatUser")
  created_knowledge              AIChatKnowledge[]       @relation("KnowledgeCreator")
  acted_suggestions              AIChatSuggestion[]      @relation("SuggestionActor")
  dismissed_suggestions          AIChatSuggestion[]      @relation("SuggestionDismisser")
  resolved_alerts                Alert[]                 @relation("AlertResolver")
  acknowledged_alerts            Alert[]                 @relation("AlertAcknowledger")
  analytics_events               AnalyticsEvent[]        @relation("AnalyticsEventUser")
  created_automation_rules       AutomationRule[]        @relation("AutomationRuleCreator")
  created_reports                CustomReport[]          @relation("ReportCreator")
  created_dashboards             ExecutiveDashboard[]    @relation("DashboardCreator")
  created_integrations           Integration[]           @relation("IntegrationCreator")
  created_maintenance_schedules  MaintenanceSchedule[]
  material_transactions          MaterialTransaction[]
  purchase_orders_created        PurchaseOrder[]         @relation("PurchaseOrderCreatedBy")
  purchase_orders_approved       PurchaseOrder[]         @relation("PurchaseOrderApprovedBy")
  created_notification_templates NotificationTemplate[]  @relation("NotificationTemplateCreator")
  progress_logs                  ProductionProgressLog[]
  created_schedules              ProductionSchedule[]
  report_executions              ReportExecution[]       @relation("ReportExecutor")
  report_exports                 ReportExport[]          @relation("ReportExporter")
  shared_reports                 ReportShare[]           @relation("ReportSharer")
  workspace                      Workspace               @relation(fields: [workspace_id], references: [id])
  created_work_orders            WorkOrder[]
  stock_ledger_entries           StockLedger[]           @relation("StockLedgerUser")
  retail_sales_as_cashier        RetailSale[]            @relation("RetailSaleCashier")
  warehouse_deliveries_received  WarehouseDelivery[]     @relation("DeliveryReceiver")

  @@unique([workspace_id, email])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, role])
  @@index([workspace_id, last_login_at])
  @@index([email])
  @@index([is_active])
  @@index([created_at])
  @@map("users")
}

model Client {
  id                      String                  @id @default(cuid())
  workspace_id            String
  name                    String
  contact_person          String?
  email                   String?
  phone                   String?
  address                 String?
  tax_id                  String?
  payment_terms           Int?
  credit_limit            Float?
  is_active               Boolean                 @default(true)
  portal_settings         String?
  created_at              DateTime                @default(now())
  updated_at              DateTime                @updatedAt
  deleted_at              DateTime?
  brands                  Brand[]
  client_activities       ClientActivity[]
  client_messages         ClientMessage[]
  client_notifications    ClientNotification[]
  client_portal_settings  ClientPortalSettings[]  @relation("ClientPortalSettings")
  client_sessions         ClientSession[]
  workspace               Workspace               @relation(fields: [workspace_id], references: [id])
  demand_forecasts        DemandForecast[]
  design_approvals        DesignApproval[]
  invoices                Invoice[]
  orders                  Order[]
  product_recommendations ProductRecommendation[]
  profit_analyses         ProfitAnalysis[]

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, created_at])
  @@index([name])
  @@index([email])
  @@index([is_active])
  @@index([created_at])
  @@map("clients")
}

model Brand {
  id               String           @id @default(cuid())
  workspace_id     String
  client_id        String
  name             String
  code             String?
  logo_url         String?
  settings         String?
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  client           Client           @relation(fields: [client_id], references: [id])
  workspace        Workspace        @relation(fields: [workspace_id], references: [id])
  demand_forecasts DemandForecast[]
  design_assets    DesignAsset[]
  fabric_batches   FabricBatch[]
  orders           Order[]
  piece_rates      PieceRate[]

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, client_id])
  @@index([client_id])
  @@index([code])
  @@index([is_active])
  @@index([created_at])
  @@map("brands")
}

model Order {
  id                    String                @id @default(cuid())
  workspace_id          String
  client_id             String
  brand_id              String?
  order_number          String
  po_number             String?
  order_type            String?               @default("NEW")
  status                String                @default("draft")
  total_amount          Float
  currency              String                @default("PHP")
  delivery_date         DateTime?
  notes                 String?
  design_name           String?
  fabric_type           String?
  mockup_url            String?
  size_distribution     String?
  metadata              String?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  deleted_at            DateTime?
  bundles               Bundle[]
  capa_tasks            CAPATask[]            @relation("OrderCAPATasks")
  cartons               Carton[]
  client_messages       ClientMessage[]
  cost_allocations      CostAllocation[]
  cut_issues            CutIssue[]
  cut_lays              CutLay[]
  deliveries            Delivery[]
  design_assets         DesignAsset[]
  expenses              Expense[]
  finished_units        FinishedUnit[]
  finishing_runs        FinishingRun[]
  invoices              Invoice[]
  material_requirements MaterialRequirement[]
  activity_logs         OrderActivityLog[]
  order_files           OrderFile[]
  line_items            OrderLineItem[]
  brand                 Brand?                @relation(fields: [brand_id], references: [id])
  client                Client                @relation(fields: [client_id], references: [id])
  workspace             Workspace             @relation(fields: [workspace_id], references: [id])
  print_runs            PrintRun[]
  production_schedules  ProductionSchedule[]
  profit_analyses       ProfitAnalysis[]
  qc_inspections        QCInspection[]
  quality_data_points   QualityDataPoint[]
  quality_predictions   QualityPrediction[]
  routing_steps         RoutingStep[]
  sewing_runs           SewingRun[]
  shipments             Shipment[]

  @@unique([workspace_id, order_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, client_id])
  @@index([workspace_id, created_at])
  @@index([workspace_id, delivery_date])
  @@index([client_id])
  @@index([brand_id])
  @@index([status])
  @@index([order_number])
  @@index([delivery_date])
  @@index([created_at])
  @@map("orders")
}

model OrderLineItem {
  id              String         @id @default(cuid())
  workspace_id    String
  order_id        String
  sku             String?
  description     String
  quantity        Int
  unit_price      Float
  total_price     Float
  printing_method String?
  garment_type    String?
  size_breakdown  String?
  metadata        String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  color_variants  ColorVariant[]
  garment_addons  GarmentAddon[]
  order           Order          @relation(fields: [order_id], references: [id])

  @@index([workspace_id])
  @@index([order_id])
  @@index([sku])
  @@index([printing_method])
  @@index([created_at])
  @@map("order_line_items")
}

model ColorVariant {
  id           String        @id @default(cuid())
  line_item_id String
  color_name   String
  color_code   String
  percentage   Float
  quantity     Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  line_item    OrderLineItem @relation(fields: [line_item_id], references: [id], onDelete: Cascade)

  @@index([line_item_id])
  @@index([color_name])
  @@map("color_variants")
}

model GarmentAddon {
  id             String        @id @default(cuid())
  line_item_id   String
  addon_type     String
  addon_name     String
  description    String?
  price_per_unit Float
  is_selected    Boolean       @default(false)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  line_item      OrderLineItem @relation(fields: [line_item_id], references: [id], onDelete: Cascade)

  @@index([line_item_id])
  @@index([addon_type])
  @@index([is_selected])
  @@map("garment_addons")
}

model OrderFile {
  id            String    @id @default(cuid())
  workspace_id  String
  order_id      String
  file_type     String
  file_category String
  file_name     String
  file_url      String
  file_size     Int?
  mime_type     String?
  thumbnail_url String?
  uploaded_by   String?
  notes         String?
  metadata      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  order         Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  workspace     Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, order_id])
  @@index([order_id])
  @@index([file_type])
  @@index([file_category])
  @@index([created_at])
  @@map("order_files")
}

model DesignAsset {
  id               String                @id @default(cuid())
  workspace_id     String
  brand_id         String
  order_id         String
  name             String
  method           String
  status           String                @default("DRAFT")
  current_version  Int                   @default(1)
  is_best_seller   Boolean               @default(false)
  tags             String?
  artist_filename  String?
  mockup_image_url String?
  notes_remarks    String?
  created_by       String
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
  analytics        DesignAnalytics[]
  approvals        DesignApproval[]
  order            Order                 @relation(fields: [order_id], references: [id])
  brand            Brand                 @relation(fields: [brand_id], references: [id])
  workspace        Workspace             @relation(fields: [workspace_id], references: [id])
  checks           DesignCheck[]
  collaborations   DesignCollaboration[]
  comments         DesignComment[]
  versions         DesignVersion[]
  print_locations  PrintLocation[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, method])
  @@index([workspace_id, is_best_seller])
  @@index([brand_id])
  @@index([order_id])
  @@index([status])
  @@index([method])
  @@index([is_best_seller])
  @@index([created_at])
  @@map("design_assets")
}

model PrintLocation {
  id              String      @id @default(cuid())
  design_asset_id String
  location        String
  location_label  String?
  design_file_url String?
  width_cm        Float?
  height_cm       Float?
  offset_x_cm     Float?
  offset_y_cm     Float?
  notes           String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  design_asset    DesignAsset @relation(fields: [design_asset_id], references: [id], onDelete: Cascade)

  @@index([design_asset_id])
  @@index([location])
  @@map("print_locations")
}

model DesignVersion {
  id               String                 @id @default(cuid())
  asset_id         String
  version          Int
  files            String
  placements       String
  palette          String?
  meta             String?
  created_by       String
  created_at       DateTime               @default(now())
  collaborations   DesignCollaboration[]
  comments         DesignComment[]
  cost_estimates   DesignCostEstimate[]
  file_validations DesignFileValidation[]
  mockups          DesignMockup[]
  production_specs DesignProductionSpec[]
  design_asset     DesignAsset            @relation(fields: [asset_id], references: [id])
  embroidery_runs  EmbroideryRun[]

  @@unique([asset_id, version])
  @@index([asset_id])
  @@index([created_at])
  @@map("design_versions")
}

model DesignApproval {
  id                 String                  @id @default(cuid())
  workspace_id       String
  asset_id           String
  version            Int
  status             String                  @default("SENT")
  client_id          String
  employee_id        String?
  workflow_id        String?
  approver_name      String?
  approver_email     String?
  approver_signed_at DateTime?
  comments           String?
  esign_envelope_id  String?
  portal_token       String?
  expires_at         DateTime?
  created_at         DateTime                @default(now())
  workflow           DesignApprovalWorkflow? @relation("DesignApprovalWorkflowApprovals", fields: [workflow_id], references: [id])
  employee           Employee?               @relation("EmployeeDesignApprovals", fields: [employee_id], references: [id])
  client             Client                  @relation(fields: [client_id], references: [id])
  design_asset       DesignAsset             @relation(fields: [asset_id], references: [id])
  workspace          Workspace               @relation("WorkspaceDesignApprovals", fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, client_id])
  @@index([asset_id])
  @@index([client_id])
  @@index([employee_id])
  @@index([status])
  @@index([portal_token])
  @@index([expires_at])
  @@index([created_at])
  @@map("design_approvals")
}

model DesignCheck {
  id           String      @id @default(cuid())
  asset_id     String
  version      Int
  method       String
  result       String
  issues       String?
  metrics      String?
  created_at   DateTime    @default(now())
  design_asset DesignAsset @relation(fields: [asset_id], references: [id])

  @@index([asset_id])
  @@index([method])
  @@index([result])
  @@index([created_at])
  @@map("design_checks")
}

model RoutingTemplate {
  id              String                @id @default(cuid())
  workspace_id    String
  name            String
  description     String?
  printing_method String
  is_active       Boolean               @default(true)
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  steps           RoutingTemplateStep[]

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, printing_method])
  @@index([printing_method])
  @@index([is_active])
  @@index([created_at])
  @@map("routing_templates")
}

model RoutingTemplateStep {
  id                  String          @id @default(cuid())
  workspace_id        String
  routing_template_id String
  step_name           String
  step_order          Int
  department          String
  estimated_hours     Float?
  requires_qc         Boolean         @default(false)
  dependencies        String?
  metadata            String?
  routing_template    RoutingTemplate @relation(fields: [routing_template_id], references: [id])

  @@index([workspace_id])
  @@index([routing_template_id])
  @@index([routing_template_id, step_order])
  @@index([department])
  @@map("routing_template_steps")
}

model RoutingStep {
  id              String         @id @default(cuid())
  workspace_id    String
  order_id        String
  step_name       String
  step_order      Int
  department      String
  status          String         @default("pending")
  started_at      DateTime?
  completed_at    DateTime?
  estimated_hours Float?
  actual_hours    Float?
  assigned_to     String?
  notes           String?
  metadata        String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  finishing_runs  FinishingRun[] @relation("RoutingStepFinishingRuns")
  print_runs      PrintRun[]
  qc_inspections  QCInspection[]
  order           Order          @relation(fields: [order_id], references: [id])
  sewing_runs     SewingRun[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([order_id, step_order])
  @@index([status])
  @@index([department])
  @@index([assigned_to])
  @@index([created_at])
  @@map("routing_steps")
}

model Bundle {
  id             String           @id @default(cuid())
  workspace_id   String
  order_id       String
  size_code      String
  qty            Int
  lay_id         String?
  qr_code        String           @unique
  status         String           @default("CREATED")
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  lay            CutLay?          @relation(fields: [lay_id], references: [id])
  order          Order            @relation(fields: [order_id], references: [id])
  print_rejects  PrintReject[]
  print_outputs  PrintRunOutput[]
  qc_inspections QCInspection[]
  sewing_runs    SewingRun[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([lay_id])
  @@index([status])
  @@index([qr_code])
  @@index([created_at])
  @@map("bundles")
}

model Employee {
  id                    String                   @id @default(cuid())
  workspace_id          String
  employee_number       String
  first_name            String
  last_name             String
  email                 String                   @unique
  password_hash         String
  role                  String                   @default("employee")
  position              String
  department            String
  hire_date             DateTime
  salary_type           String
  base_salary           Float?
  piece_rate            Float?
  is_active             Boolean                  @default(true)
  contact_info          String?
  permissions           String?
  profile_picture       String?
  last_login            DateTime?
  created_at            DateTime                 @default(now())
  updated_at            DateTime                 @updatedAt
  deleted_at            DateTime?
  attendance            AttendanceLog[]
  capa_attachments      CAPAAttachment[]
  capa_verified         CAPATask[]               @relation("CAPAVerifier")
  capa_created          CAPATask[]               @relation("CAPACreator")
  capa_assigned         CAPATask[]               @relation("CAPAAssignee")
  capa_updates          CAPAUpdate[]
  design_workflows      DesignApprovalWorkflow[]
  design_approvals      DesignApproval[]         @relation("EmployeeDesignApprovals")
  design_collaborations DesignCollaboration[]
  comment_resolutions   DesignComment[]          @relation("CommentResolver")
  design_comments       DesignComment[]
  design_estimates      DesignCostEstimate[]
  design_mockups        DesignMockup[]
  design_specs          DesignProductionSpec[]
  design_templates      DesignTemplate[]
  workspace             Workspace                @relation(fields: [workspace_id], references: [id])
  finishing_runs        FinishingRun[]           @relation("FinishingOperator")
  earnings              PayrollEarning[]
  qc_defects            QCDefect[]
  qc_inspections        QCInspection[]
  quality_data_created  QualityDataPoint[]       @relation("EmployeeQualityDataCreator")
  quality_data_points   QualityDataPoint[]       @relation("EmployeeQualityDataOperator")
  sewing_runs           SewingRun[]
  assigned_work_orders  WorkOrder[]
  worker_allocations    WorkerAllocation[]
  worker_assignments    WorkerAssignment[]

  @@unique([workspace_id, employee_number])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, position])
  @@index([workspace_id, department])
  @@index([workspace_id, salary_type])
  @@index([position])
  @@index([department])
  @@index([is_active])
  @@index([hire_date])
  @@index([created_at])
  @@map("employees")
}

model AttendanceLog {
  id               String    @id @default(cuid())
  workspace_id     String
  employee_id      String
  date             DateTime
  time_in          DateTime?
  time_out         DateTime?
  break_minutes    Int?
  overtime_minutes Int?
  status           String
  notes            String?
  metadata         String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  employee         Employee  @relation(fields: [employee_id], references: [id])

  @@unique([employee_id, date])
  @@index([workspace_id])
  @@index([employee_id])
  @@index([date])
  @@index([status])
  @@index([workspace_id, date])
  @@index([workspace_id, status])
  @@map("attendance_logs")
}

model Invoice {
  id               String        @id @default(cuid())
  workspace_id     String
  client_id        String
  order_id         String?
  invoice_number   String
  status           String        @default("draft")
  subtotal         Float
  discount_amount  Float?        @default(0)
  tax_amount       Float?        @default(0)
  total_amount     Float
  currency         String        @default("PHP")
  issue_date       DateTime      @default(now())
  due_date         DateTime?
  sent_at          DateTime?
  paid_at          DateTime?
  payment_terms    Int?
  notes            String?
  terms_conditions String?
  metadata         String?
  created_by       String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  credit_notes     CreditNote[]
  invoice_items    InvoiceItem[]
  order            Order?        @relation(fields: [order_id], references: [id])
  client           Client        @relation(fields: [client_id], references: [id])
  payments         Payment[]

  @@unique([workspace_id, invoice_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, client_id])
  @@index([workspace_id, due_date])
  @@index([workspace_id, issue_date])
  @@index([client_id])
  @@index([order_id])
  @@index([status])
  @@index([due_date])
  @@index([issue_date])
  @@index([created_at])
  @@map("invoices")
}

model InvoiceItem {
  id                 String   @id @default(cuid())
  invoice_id         String
  description        String
  quantity           Float
  unit_price         Float
  discount_percent   Float?   @default(0)
  tax_percent        Float?   @default(0)
  line_total         Float
  order_line_item_id String?
  created_at         DateTime @default(now())
  invoice            Invoice  @relation(fields: [invoice_id], references: [id])

  @@index([invoice_id])
  @@index([order_line_item_id])
  @@index([created_at])
  @@map("invoice_items")
}

model Payment {
  id              String       @id @default(cuid())
  workspace_id    String
  invoice_id      String?
  payment_number  String
  amount          Float
  currency        String       @default("PHP")
  payment_method  String
  reference       String?
  status          String       @default("pending")
  payment_date    DateTime     @default(now())
  processed_at    DateTime?
  bank_account_id String?
  reconciled      Boolean      @default(false)
  reconciled_at   DateTime?
  notes           String?
  metadata        String?
  created_by      String?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  bank_account    BankAccount? @relation(fields: [bank_account_id], references: [id])
  invoice         Invoice?     @relation(fields: [invoice_id], references: [id])

  @@unique([workspace_id, payment_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, payment_method])
  @@index([workspace_id, payment_date])
  @@index([invoice_id])
  @@index([bank_account_id])
  @@index([status])
  @@index([payment_method])
  @@index([payment_date])
  @@index([reconciled])
  @@index([created_at])
  @@map("payments")
}

model CreditNote {
  id            String    @id @default(cuid())
  workspace_id  String
  invoice_id    String
  credit_number String
  amount        Float
  reason        String
  description   String?
  status        String    @default("draft")
  issue_date    DateTime  @default(now())
  applied_at    DateTime?
  created_by    String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  invoice       Invoice   @relation(fields: [invoice_id], references: [id])

  @@unique([workspace_id, credit_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([invoice_id])
  @@index([status])
  @@index([reason])
  @@index([issue_date])
  @@index([created_at])
  @@map("credit_notes")
}

model BankAccount {
  id              String            @id @default(cuid())
  workspace_id    String
  account_name    String
  account_number  String
  bank_name       String
  account_type    String
  currency        String            @default("PHP")
  current_balance Float             @default(0)
  is_active       Boolean           @default(true)
  description     String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  transactions    BankTransaction[]
  payments        Payment[]

  @@unique([workspace_id, account_number])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, account_type])
  @@index([account_type])
  @@index([is_active])
  @@index([created_at])
  @@map("bank_accounts")
}

model BankTransaction {
  id               String      @id @default(cuid())
  workspace_id     String
  bank_account_id  String
  transaction_ref  String?
  type             String
  amount           Float
  description      String
  category         String?
  transaction_date DateTime
  balance_after    Float?
  reconciled       Boolean     @default(false)
  reconciled_at    DateTime?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  bank_account     BankAccount @relation(fields: [bank_account_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, transaction_date])
  @@index([workspace_id, type])
  @@index([bank_account_id])
  @@index([transaction_date])
  @@index([type])
  @@index([category])
  @@index([reconciled])
  @@index([created_at])
  @@map("bank_transactions")
}

model Expense {
  id             String    @id @default(cuid())
  workspace_id   String
  expense_number String
  category       String
  subcategory    String?
  description    String
  amount         Float
  currency       String    @default("PHP")
  expense_date   DateTime
  payment_method String?
  payment_ref    String?
  supplier       String?
  tax_amount     Float?    @default(0)
  receipt_url    String?
  approved       Boolean   @default(false)
  approved_by    String?
  approved_at    DateTime?
  order_id       String?
  notes          String?
  created_by     String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  order          Order?    @relation(fields: [order_id], references: [id])

  @@unique([workspace_id, expense_number])
  @@index([workspace_id])
  @@index([workspace_id, category])
  @@index([workspace_id, expense_date])
  @@index([workspace_id, approved])
  @@index([category])
  @@index([order_id])
  @@index([expense_date])
  @@index([approved])
  @@index([supplier])
  @@index([created_at])
  @@map("expenses")
}

model CostCenter {
  id               String           @id @default(cuid())
  workspace_id     String
  code             String
  name             String
  description      String?
  type             String
  budget_amount    Float?
  actual_spend     Float            @default(0)
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  budgets          Budget[]
  cost_allocations CostAllocation[]

  @@unique([workspace_id, code])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, type])
  @@index([type])
  @@index([is_active])
  @@index([created_at])
  @@map("cost_centers")
}

model CostAllocation {
  id              String     @id @default(cuid())
  workspace_id    String
  cost_center_id  String
  order_id        String?
  allocation_type String
  cost_type       String
  amount          Float
  allocation_date DateTime
  description     String?
  reference_type  String?
  reference_id    String?
  created_at      DateTime   @default(now())
  order           Order?     @relation(fields: [order_id], references: [id])
  cost_center     CostCenter @relation(fields: [cost_center_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, allocation_date])
  @@index([cost_center_id])
  @@index([order_id])
  @@index([allocation_type])
  @@index([allocation_date])
  @@index([created_at])
  @@map("cost_allocations")
}

model Budget {
  id               String     @id @default(cuid())
  workspace_id     String
  cost_center_id   String
  budget_period    String
  period_start     DateTime
  period_end       DateTime
  budgeted_amount  Float
  spent_amount     Float      @default(0)
  committed_amount Float      @default(0)
  variance         Float      @default(0)
  variance_percent Float      @default(0)
  status           String     @default("active")
  notes            String?
  created_by       String?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  cost_center      CostCenter @relation(fields: [cost_center_id], references: [id])

  @@unique([workspace_id, cost_center_id, budget_period])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([cost_center_id])
  @@index([budget_period])
  @@index([status])
  @@index([period_start])
  @@index([period_end])
  @@index([created_at])
  @@map("budgets")
}

model FinancialReport {
  id            String      @id @default(cuid())
  workspace_id  String
  report_type   String
  report_name   String
  parameters    String
  period_type   String
  auto_generate Boolean     @default(false)
  schedule      String?
  recipients    String?
  is_active     Boolean     @default(true)
  created_by    String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  report_runs   ReportRun[]

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, report_type])
  @@index([report_type])
  @@index([is_active])
  @@index([auto_generate])
  @@index([created_at])
  @@map("financial_reports")
}

model ReportRun {
  id               String          @id @default(cuid())
  workspace_id     String
  report_id        String
  run_date         DateTime        @default(now())
  period_start     DateTime
  period_end       DateTime
  status           String          @default("running")
  file_url         String?
  file_format      String?
  run_time_seconds Float?
  error_message    String?
  generated_by     String?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  report           FinancialReport @relation(fields: [report_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([report_id])
  @@index([status])
  @@index([run_date])
  @@index([period_start])
  @@index([period_end])
  @@index([created_at])
  @@map("report_runs")
}

model FinancialMetric {
  id                 String   @id @default(cuid())
  workspace_id       String
  metric_name        String
  metric_type        String
  value              Float
  previous_value     Float?
  target_value       Float?
  variance           Float?
  unit               String?
  period             String
  period_start       DateTime
  period_end         DateTime
  calculation_method String?
  data_source        String?
  calculated_at      DateTime @default(now())
  created_at         DateTime @default(now())

  @@index([workspace_id])
  @@index([workspace_id, metric_type])
  @@index([workspace_id, period])
  @@index([metric_name])
  @@index([metric_type])
  @@index([period])
  @@index([period_start])
  @@index([period_end])
  @@index([calculated_at])
  @@map("financial_metrics")
}

model TaxSetting {
  id             String    @id @default(cuid())
  workspace_id   String
  tax_name       String
  tax_type       String
  rate_percent   Float
  is_default     Boolean   @default(false)
  applicable_to  String
  effective_date DateTime
  end_date       DateTime?
  description    String?
  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, tax_type])
  @@index([tax_type])
  @@index([is_active])
  @@index([is_default])
  @@index([effective_date])
  @@index([end_date])
  @@map("tax_settings")
}

model Asset {
  id                    String                @id @default(cuid())
  workspace_id          String
  name                  String
  asset_number          String
  type                  String
  category              String?
  location              String?
  purchase_date         DateTime?
  purchase_cost         Float?
  status                String                @default("active")
  metadata              String?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  deleted_at            DateTime?
  workspace             Workspace             @relation(fields: [workspace_id], references: [id])
  maintenance_schedules MaintenanceSchedule[]
  work_orders           WorkOrder[]

  @@unique([workspace_id, asset_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, type])
  @@index([status])
  @@index([type])
  @@index([location])
  @@index([purchase_date])
  @@index([created_at])
  @@map("assets")
}

model WorkOrder {
  id                      String               @id @default(cuid())
  workspace_id            String
  asset_id                String
  maintenance_schedule_id String?
  title                   String
  description             String?
  type                    String
  priority                String
  status                  String               @default("open")
  assigned_to             String?
  scheduled_date          DateTime?
  started_at              DateTime?
  completed_at            DateTime?
  cost                    Float?
  labor_hours             Float?
  parts_used              String?
  notes                   String?
  completion_notes        String?
  metadata                String?
  created_by              String?
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
  creator                 User?                @relation(fields: [created_by], references: [id])
  assignee                Employee?            @relation(fields: [assigned_to], references: [id])
  maintenance_schedule    MaintenanceSchedule? @relation("ScheduledMaintenance", fields: [maintenance_schedule_id], references: [id])
  asset                   Asset                @relation(fields: [asset_id], references: [id])
  workspace               Workspace            @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, priority])
  @@index([workspace_id, type])
  @@index([asset_id])
  @@index([maintenance_schedule_id])
  @@index([assigned_to])
  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([scheduled_date])
  @@index([created_at])
  @@map("work_orders")
}

model AuditLog {
  id           String   @id @default(cuid())
  workspace_id String
  user_id      String?
  action       String
  resource     String
  resource_id  String
  old_values   String?
  new_values   String?
  ip_address   String?
  user_agent   String?
  created_at   DateTime @default(now())

  @@map("audit_logs")
}

model UserSession {
  id            String    @id @default(cuid())
  user_id       String
  token_hash    String    @unique
  ip_address    String?
  user_agent    String?
  is_active     Boolean   @default(true)
  last_activity DateTime  @default(now())
  expires_at    DateTime
  created_at    DateTime  @default(now())
  revoked_at    DateTime?

  @@index([user_id])
  @@index([user_id, is_active])
  @@index([expires_at])
  @@map("user_sessions")
}

model Automation {
  id           String    @id @default(cuid())
  workspace_id String
  name         String
  description  String?
  trigger_type String
  conditions   String
  actions      String
  is_active    Boolean   @default(true)
  last_run     DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("automations")
}

model FabricBatch {
  id           String     @id @default(cuid())
  workspace_id String
  brand_id     String
  item_id      String?
  lot_no       String
  uom          String
  qty_on_hand  Float
  gsm          Int?
  width_cm     Int?
  received_at  DateTime?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  cut_issues   CutIssue[]
  brand        Brand      @relation(fields: [brand_id], references: [id])

  @@unique([workspace_id, lot_no])
  @@index([workspace_id])
  @@index([workspace_id, brand_id])
  @@index([brand_id])
  @@index([lot_no])
  @@index([uom])
  @@index([received_at])
  @@index([created_at])
  @@map("fabric_batches")
}

model CutIssue {
  id           String      @id @default(cuid())
  workspace_id String
  order_id     String
  batch_id     String
  qty_issued   Float
  uom          String
  issued_by    String
  created_at   DateTime    @default(now())
  batch        FabricBatch @relation(fields: [batch_id], references: [id])
  order        Order       @relation(fields: [order_id], references: [id])

  @@map("cut_issues")
}

model CutLay {
  id              String      @id @default(cuid())
  workspace_id    String
  order_id        String
  marker_name     String?
  marker_width_cm Int?
  lay_length_m    Float
  plies           Int
  gross_used      Float
  offcuts         Float?      @default(0)
  defects         Float?      @default(0)
  uom             String
  created_by      String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  bundles         Bundle[]
  order           Order       @relation(fields: [order_id], references: [id])
  outputs         CutOutput[]

  @@map("cut_lays")
}

model CutOutput {
  id           String   @id @default(cuid())
  workspace_id String
  cut_lay_id   String
  size_code    String
  qty          Int
  created_at   DateTime @default(now())
  cut_lay      CutLay   @relation(fields: [cut_lay_id], references: [id])

  @@unique([cut_lay_id, size_code])
  @@map("cut_outputs")
}

model Machine {
  id                 String             @id @default(cuid())
  workspace_id       String
  workcenter         String
  name               String
  spec               String?
  is_active          Boolean            @default(true)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  silkscreen_curing  CuringLog[]
  heat_press_logs    HeatPressLog[]
  workspace          Workspace          @relation(fields: [workspace_id], references: [id])
  print_runs         PrintRun[]
  sublimation_prints SublimationPrint[]
  work_stations      WorkStation[]

  @@index([workspace_id])
  @@index([name])
  @@index([is_active])
  @@index([created_at])
  @@map("machines")
}

model PrintRun {
  id                 String             @id @default(cuid())
  workspace_id       String
  order_id           String
  routing_step_id    String?
  method             String
  print_options      String?
  workcenter         String
  machine_id         String?
  started_at         DateTime?
  ended_at           DateTime?
  status             String             @default("CREATED")
  created_by         String
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  curing_logs        CuringLog[]
  dtf_powder_cures   DtfPowderCure[]
  dtf_prints         DtfPrint[]
  embroidery_runs    EmbroideryRun[]
  heat_press_logs    HeatPressLog[]
  rejects            PrintReject[]
  materials          PrintRunMaterial[]
  outputs            PrintRunOutput[]
  routing_step       RoutingStep?       @relation(fields: [routing_step_id], references: [id])
  machine            Machine?           @relation(fields: [machine_id], references: [id])
  order              Order              @relation(fields: [order_id], references: [id])
  silkscreen_prep    SilkscreenPrep[]
  silkscreen_specs   SilkscreenSpec[]
  sublimation_prints SublimationPrint[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, method])
  @@index([order_id])
  @@index([routing_step_id])
  @@index([machine_id])
  @@index([status])
  @@index([method])
  @@index([started_at])
  @@index([ended_at])
  @@index([created_at])
  @@map("print_runs")
}

model PrintRunOutput {
  id         String   @id @default(cuid())
  run_id     String
  bundle_id  String?
  qty_good   Int      @default(0)
  qty_reject Int      @default(0)
  notes      String?
  created_at DateTime @default(now())
  bundle     Bundle?  @relation(fields: [bundle_id], references: [id])
  run        PrintRun @relation(fields: [run_id], references: [id])

  @@map("print_run_outputs")
}

model PrintRunMaterial {
  id              String   @id @default(cuid())
  run_id          String
  item_id         String?
  uom             String
  qty             Float
  source_batch_id String?
  created_at      DateTime @default(now())
  run             PrintRun @relation(fields: [run_id], references: [id])

  @@map("print_run_materials")
}

model PrintReject {
  id               String   @id @default(cuid())
  run_id           String
  bundle_id        String?
  reason_code      String
  qty              Int
  photo_url        String?
  cost_attribution String?
  created_at       DateTime @default(now())
  bundle           Bundle?  @relation(fields: [bundle_id], references: [id])
  run              PrintRun @relation(fields: [run_id], references: [id])

  @@map("print_rejects")
}

model SilkscreenPrep {
  id                 String   @id @default(cuid())
  run_id             String
  screen_id          String
  mesh_count         Int
  emulsion_batch     String?
  exposure_seconds   Int?
  registration_notes String?
  created_at         DateTime @default(now())
  run                PrintRun @relation(fields: [run_id], references: [id])

  @@map("silkscreen_prep")
}

model SilkscreenSpec {
  id                 String   @id @default(cuid())
  run_id             String
  ink_type           String
  coats              Int
  squeegee_durometer Int?
  floodbar           String?
  expected_ink_g     Float?
  created_at         DateTime @default(now())
  run                PrintRun @relation(fields: [run_id], references: [id])

  @@map("silkscreen_specs")
}

model CuringLog {
  id         String   @id @default(cuid())
  run_id     String
  dryer_id   String?
  temp_c     Int
  seconds    Int
  belt_speed String?
  created_at DateTime @default(now())
  dryer      Machine? @relation(fields: [dryer_id], references: [id])
  run        PrintRun @relation(fields: [run_id], references: [id])

  @@map("curing_logs")
}

model SublimationPrint {
  id         String   @id @default(cuid())
  run_id     String
  printer_id String?
  paper_m2   Float
  ink_g      Float?
  created_at DateTime @default(now())
  printer    Machine? @relation(fields: [printer_id], references: [id])
  run        PrintRun @relation(fields: [run_id], references: [id])

  @@map("sublimation_prints")
}

model HeatPressLog {
  id         String   @id @default(cuid())
  run_id     String
  press_id   String?
  temp_c     Int
  seconds    Int
  pressure   String?
  cycles     Int      @default(1)
  created_at DateTime @default(now())
  press      Machine? @relation(fields: [press_id], references: [id])
  run        PrintRun @relation(fields: [run_id], references: [id])

  @@map("heat_press_logs")
}

model DtfPrint {
  id         String   @id @default(cuid())
  run_id     String
  film_m2    Float
  ink_g      Float?
  created_at DateTime @default(now())
  run        PrintRun @relation(fields: [run_id], references: [id])

  @@map("dtf_prints")
}

model DtfPowderCure {
  id         String   @id @default(cuid())
  run_id     String
  powder_g   Float
  temp_c     Int
  seconds    Int
  created_at DateTime @default(now())
  run        PrintRun @relation(fields: [run_id], references: [id])

  @@map("dtf_powder_cures")
}

model EmbroideryRun {
  id                String         @id @default(cuid())
  run_id            String
  design_version_id String?
  stitch_count      Int
  machine_spm       Int?
  stabilizer_type   String?
  thread_colors     String?
  thread_breaks     Int            @default(0)
  runtime_minutes   Float?
  created_at        DateTime       @default(now())
  design            DesignVersion? @relation(fields: [design_version_id], references: [id])
  run               PrintRun       @relation(fields: [run_id], references: [id])

  @@map("embroidery_runs")
}

model QCDefectCode {
  id           String     @id @default(cuid())
  workspace_id String
  code         String
  name         String
  category     String
  severity     String
  description  String?
  is_active    Boolean    @default(true)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  defects      QCDefect[]

  @@unique([workspace_id, code])
  @@map("qc_defect_codes")
}

model QCChecklist {
  id           String         @id @default(cuid())
  workspace_id String
  name         String
  type         String
  category     String
  items        String
  is_active    Boolean        @default(true)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  inspections  QCInspection[]

  @@map("qc_checklists")
}

model QCInspection {
  id                  String             @id @default(cuid())
  workspace_id        String
  order_id            String
  routing_step_id     String?
  bundle_id           String?
  inspection_point_id String?
  checklist_id        String?
  inspector_id        String
  stage               String
  inspection_level    String             @default("GII")
  aql                 Float              @default(2.5)
  lot_size            Int
  sample_size         Int
  acceptance          Int
  rejection           Int
  critical_found      Int                @default(0)
  major_found         Int                @default(0)
  minor_found         Int                @default(0)
  status              String             @default("OPEN")
  result              String?
  disposition         String?
  hold_shipment       Boolean            @default(false)
  inspection_date     DateTime
  started_at          DateTime?
  completed_at        DateTime?
  closed_at           DateTime?
  notes               String?
  ashley_analysis     String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  capa_tasks          CAPATask[]
  defects             QCDefect[]
  inspection_point    QCInspectionPoint? @relation("QCInspectionPointInspections", fields: [inspection_point_id], references: [id])
  inspector           Employee           @relation(fields: [inspector_id], references: [id])
  checklist           QCChecklist?       @relation(fields: [checklist_id], references: [id])
  bundle              Bundle?            @relation(fields: [bundle_id], references: [id])
  routing_step        RoutingStep?       @relation(fields: [routing_step_id], references: [id])
  order               Order              @relation(fields: [order_id], references: [id])
  workspace           Workspace          @relation("WorkspaceQCInspections", fields: [workspace_id], references: [id])
  samples             QCSample[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, stage])
  @@index([order_id])
  @@index([bundle_id])
  @@index([routing_step_id])
  @@index([inspector_id])
  @@index([status])
  @@index([stage])
  @@index([inspection_date])
  @@index([created_at])
  @@map("qc_inspections")
}

model QCSample {
  id            String       @id @default(cuid())
  workspace_id  String
  inspection_id String
  sample_no     Int
  sampled_from  String?
  unit_ref      String?
  qty_sampled   Int
  defects_found Int          @default(0)
  result        String       @default("OK")
  sample_data   String?
  sampled_at    DateTime     @default(now())
  defects       QCDefect[]
  inspection    QCInspection @relation(fields: [inspection_id], references: [id])

  @@unique([inspection_id, sample_no])
  @@map("qc_samples")
}

model QCDefect {
  id             String        @id @default(cuid())
  workspace_id   String
  inspection_id  String
  sample_id      String?
  defect_code_id String
  defect_type_id String?
  quantity       Int           @default(1)
  severity       String
  location       String?
  description    String?
  photo_url      String?
  operator_id    String?
  root_cause     String?
  created_at     DateTime      @default(now())
  capa_tasks     CAPATask[]
  operator       Employee?     @relation(fields: [operator_id], references: [id])
  defect_type    QCDefectType? @relation("QCDefectTypeDefects", fields: [defect_type_id], references: [id])
  defect_code    QCDefectCode  @relation(fields: [defect_code_id], references: [id])
  sample         QCSample?     @relation(fields: [sample_id], references: [id])
  inspection     QCInspection  @relation(fields: [inspection_id], references: [id])
  workspace      Workspace     @relation("WorkspaceQCDefects", fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, severity])
  @@index([inspection_id])
  @@index([defect_code_id])
  @@index([severity])
  @@index([created_at])
  @@map("qc_defects")
}

model CAPATask {
  id                String           @id @default(cuid())
  workspace_id      String
  order_id          String?
  capa_number       String
  title             String
  type              String
  priority          String
  status            String           @default("OPEN")
  source_type       String
  source_id         String?
  inspection_id     String?
  defect_id         String?
  root_cause        String?
  corrective_action String?
  preventive_action String?
  assigned_to       String?
  due_date          DateTime?
  completed_at      DateTime?
  verified_by       String?
  verified_at       DateTime?
  effectiveness     String?
  notes             String?
  created_by        String
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  attachments       CAPAAttachment[] @relation("CAPATaskAttachments")
  verifier          Employee?        @relation("CAPAVerifier", fields: [verified_by], references: [id])
  creator           Employee         @relation("CAPACreator", fields: [created_by], references: [id])
  assignee          Employee?        @relation("CAPAAssignee", fields: [assigned_to], references: [id])
  defect            QCDefect?        @relation(fields: [defect_id], references: [id])
  inspection        QCInspection?    @relation(fields: [inspection_id], references: [id])
  order             Order?           @relation("OrderCAPATasks", fields: [order_id], references: [id])
  workspace         Workspace        @relation("WorkspaceCAPATasks", fields: [workspace_id], references: [id])
  updates           CAPAUpdate[]     @relation("CAPATaskUpdates")

  @@unique([workspace_id, capa_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, priority])
  @@index([workspace_id, type])
  @@index([order_id])
  @@index([assigned_to])
  @@index([created_by])
  @@index([verified_by])
  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([due_date])
  @@index([created_at])
  @@map("capa_tasks")
}

model PayrollPeriod {
  id           String           @id @default(cuid())
  workspace_id String
  period_start DateTime
  period_end   DateTime
  status       String           @default("draft")
  total_amount Float?
  processed_at DateTime?
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  earnings     PayrollEarning[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([status])
  @@index([period_start])
  @@index([period_end])
  @@index([created_at])
  @@map("payroll_periods")
}

model PayrollEarning {
  id                String        @id @default(cuid())
  workspace_id      String
  payroll_period_id String
  employee_id       String
  regular_hours     Float?
  overtime_hours    Float?
  piece_count       Int?
  piece_rate        Float?
  gross_pay         Float
  deductions        Float?
  net_pay           Float
  metadata          String?
  created_at        DateTime      @default(now())
  employee          Employee      @relation(fields: [employee_id], references: [id])
  payroll_period    PayrollPeriod @relation(fields: [payroll_period_id], references: [id])

  @@unique([payroll_period_id, employee_id])
  @@index([workspace_id])
  @@index([payroll_period_id])
  @@index([employee_id])
  @@index([workspace_id, employee_id])
  @@index([workspace_id, payroll_period_id])
  @@index([created_at])
  @@map("payroll_earnings")
}

model SewingOperation {
  id               String    @id @default(cuid())
  workspace_id     String
  product_type     String
  name             String
  standard_minutes Float
  piece_rate       Float?
  depends_on       String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  workspace        Workspace @relation(fields: [workspace_id], references: [id])

  @@map("sewing_operations")
}

model PieceRate {
  id             String    @id @default(cuid())
  workspace_id   String
  brand_id       String?
  operation_name String
  rate           Float
  effective_from DateTime?
  effective_to   DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  brand          Brand?    @relation(fields: [brand_id], references: [id])
  workspace      Workspace @relation(fields: [workspace_id], references: [id])

  @@map("piece_rates")
}

model SewingRun {
  id               String      @id @default(cuid())
  order_id         String
  routing_step_id  String
  operation_name   String
  sewing_type      String?
  operator_id      String
  bundle_id        String
  started_at       DateTime?
  ended_at         DateTime?
  qty_good         Int         @default(0)
  qty_reject       Int         @default(0)
  reject_reason    String?
  reject_photo_url String?
  earned_minutes   Float?
  piece_rate_pay   Float?
  actual_minutes   Float?
  efficiency_pct   Float?
  status           String      @default("CREATED")
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  bundle           Bundle      @relation(fields: [bundle_id], references: [id])
  operator         Employee    @relation(fields: [operator_id], references: [id])
  routing_step     RoutingStep @relation(fields: [routing_step_id], references: [id])
  order            Order       @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@index([order_id, status])
  @@index([bundle_id])
  @@index([operator_id])
  @@index([routing_step_id])
  @@index([status])
  @@index([started_at])
  @@index([ended_at])
  @@index([created_at])
  @@map("sewing_runs")
}

model ProductionLine {
  id                  String               @id @default(cuid())
  workspace_id        String
  name                String
  type                String
  capacity            Int
  efficiency          Float                @default(85)
  is_active           Boolean              @default(true)
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  workspace           Workspace            @relation(fields: [workspace_id], references: [id])
  schedules           ProductionSchedule[]
  quality_data_points QualityDataPoint[]
  work_stations       WorkStation[]
  allocations         WorkerAllocation[]

  @@map("production_lines")
}

model WorkStation {
  id                 String             @id @default(cuid())
  workspace_id       String
  production_line_id String
  name               String
  station_type       String
  hourly_capacity    Int
  skill_required     String?
  machine_id         String?
  is_active          Boolean            @default(true)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  machine            Machine?           @relation(fields: [machine_id], references: [id])
  production_line    ProductionLine     @relation(fields: [production_line_id], references: [id])
  workspace          Workspace          @relation(fields: [workspace_id], references: [id])
  assignments        WorkerAssignment[]

  @@map("work_stations")
}

model ProductionSchedule {
  id                 String                  @id @default(cuid())
  workspace_id       String
  order_id           String
  production_line_id String
  stage              String
  planned_start      DateTime
  planned_end        DateTime
  actual_start       DateTime?
  actual_end         DateTime?
  planned_quantity   Int
  completed_quantity Int                     @default(0)
  status             String                  @default("PLANNED")
  priority           Int                     @default(5)
  dependencies       String?
  notes              String?
  created_by         String
  created_at         DateTime                @default(now())
  updated_at         DateTime                @updatedAt
  progress_logs      ProductionProgressLog[]
  created_by_user    User                    @relation(fields: [created_by], references: [id])
  production_line    ProductionLine          @relation(fields: [production_line_id], references: [id])
  order              Order                   @relation(fields: [order_id], references: [id])
  workspace          Workspace               @relation(fields: [workspace_id], references: [id])
  worker_assignments WorkerAssignment[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([production_line_id])
  @@index([status])
  @@index([created_at])
  @@map("production_schedules")
}

model WorkerAssignment {
  id                     String             @id @default(cuid())
  workspace_id           String
  production_schedule_id String
  worker_id              String
  work_station_id        String?
  assigned_date          DateTime
  assigned_hours         Float
  actual_hours           Float?
  efficiency_rating      Float?
  status                 String             @default("ASSIGNED")
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  work_station           WorkStation?       @relation(fields: [work_station_id], references: [id])
  worker                 Employee           @relation(fields: [worker_id], references: [id])
  production_schedule    ProductionSchedule @relation(fields: [production_schedule_id], references: [id])
  workspace              Workspace          @relation("WorkspaceWorkerAssignments", fields: [workspace_id], references: [id])

  @@unique([production_schedule_id, worker_id, assigned_date])
  @@map("worker_assignments")
}

model WorkerAllocation {
  id                 String         @id @default(cuid())
  workspace_id       String
  production_line_id String
  worker_id          String
  allocation_date    DateTime
  shift              String
  hours_allocated    Float
  skill_level        String
  hourly_rate        Float?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  worker             Employee       @relation(fields: [worker_id], references: [id])
  production_line    ProductionLine @relation(fields: [production_line_id], references: [id])
  workspace          Workspace      @relation("WorkspaceWorkerAllocations", fields: [workspace_id], references: [id])

  @@unique([production_line_id, worker_id, allocation_date, shift])
  @@map("worker_allocations")
}

model MaterialInventory {
  id              String                @id @default(cuid())
  workspace_id    String
  material_type   String
  material_name   String
  supplier        String?
  color           String?
  unit            String
  current_stock   Float
  reserved_stock  Float                 @default(0)
  available_stock Float
  minimum_stock   Float                 @default(0)
  reorder_point   Float                 @default(0)
  cost_per_unit   Float?
  last_updated    DateTime              @default(now())
  location        String?
  batch_number    String?
  expiry_date     DateTime?
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  workspace       Workspace             @relation(fields: [workspace_id], references: [id])
  requirements    MaterialRequirement[]
  transactions    MaterialTransaction[]

  @@unique([workspace_id, material_name, color, batch_number])
  @@index([workspace_id])
  @@index([workspace_id, material_type])
  @@index([workspace_id, location])
  @@index([material_type])
  @@index([location])
  @@index([created_at])
  @@map("material_inventory")
}

model MaterialRequirement {
  id                    String            @id @default(cuid())
  workspace_id          String
  order_id              String
  material_inventory_id String
  required_quantity     Float
  allocated_quantity    Float             @default(0)
  consumed_quantity     Float             @default(0)
  waste_percentage      Float             @default(5)
  status                String            @default("PLANNED")
  cost_estimate         Float?
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  material_inventory    MaterialInventory @relation(fields: [material_inventory_id], references: [id])
  order                 Order             @relation(fields: [order_id], references: [id])
  workspace             Workspace         @relation("WorkspaceMaterialRequirements", fields: [workspace_id], references: [id])

  @@unique([order_id, material_inventory_id])
  @@map("material_requirements")
}

model MaterialTransaction {
  id                    String            @id @default(cuid())
  workspace_id          String
  material_inventory_id String
  transaction_type      String
  quantity              Float
  unit_cost             Float?
  reference_type        String?
  reference_id          String?
  notes                 String?
  created_by            String
  created_at            DateTime          @default(now())
  created_by_user       User              @relation(fields: [created_by], references: [id])
  material_inventory    MaterialInventory @relation(fields: [material_inventory_id], references: [id])
  workspace             Workspace         @relation("WorkspaceMaterialTransactions", fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, transaction_type])
  @@index([transaction_type])
  @@index([created_at])
  @@map("material_transactions")
}

model ProductionProgressLog {
  id                     String             @id @default(cuid())
  workspace_id           String
  production_schedule_id String
  stage                  String
  quantity_completed     Int
  quantity_rejected      Int                @default(0)
  quality_score          Float?
  notes                  String?
  logged_by              String
  logged_at              DateTime           @default(now())
  logged_by_user         User               @relation(fields: [logged_by], references: [id])
  production_schedule    ProductionSchedule @relation(fields: [production_schedule_id], references: [id])
  workspace              Workspace          @relation("WorkspaceProductionProgressLogs", fields: [workspace_id], references: [id])

  @@map("production_progress_logs")
}

model AIAnalysis {
  id              String    @id @default(cuid())
  workspace_id    String
  entity          String
  entity_id       String
  stage           String
  analysis_type   String
  risk            String
  confidence      Float
  issues          String?
  recommendations String?
  metadata        String?
  cache_key       String?
  result          String?
  created_by      String
  created_at      DateTime  @default(now())
  created_by_user User      @relation(fields: [created_by], references: [id])
  workspace       Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id, entity, entity_id])
  @@index([cache_key])
  @@map("ai_analysis")
}

model QCInspectionPoint {
  id             String         @id @default(cuid())
  workspace_id   String
  name           String
  stage          String
  sequence       Int
  is_mandatory   Boolean        @default(true)
  criteria       String
  standards      String?
  photo_required Boolean        @default(true)
  ai_enabled     Boolean        @default(true)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  defect_types   QCDefectType[]
  workspace      Workspace      @relation(fields: [workspace_id], references: [id])
  inspections    QCInspection[] @relation("QCInspectionPointInspections")

  @@map("qc_inspection_points")
}

model QCDefectType {
  id                  String            @id @default(cuid())
  workspace_id        String
  inspection_point_id String
  name                String
  category            String
  severity            Int               @default(5)
  description         String
  root_causes         String?
  preventive_actions  String?
  detection_pattern   String?
  cost_impact         Float?
  customer_impact     String?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  inspection_point    QCInspectionPoint @relation(fields: [inspection_point_id], references: [id])
  workspace           Workspace         @relation(fields: [workspace_id], references: [id])
  defects             QCDefect[]        @relation("QCDefectTypeDefects")

  @@map("qc_defect_types")
}

model CAPAAttachment {
  id          String   @id @default(cuid())
  capa_id     String
  filename    String
  file_url    String
  file_type   String
  file_size   Int?
  description String?
  uploaded_by String
  uploaded_at DateTime @default(now())
  uploader    Employee @relation(fields: [uploaded_by], references: [id])
  capa        CAPATask @relation("CAPATaskAttachments", fields: [capa_id], references: [id])

  @@map("capa_attachments")
}

model CAPAUpdate {
  id          String   @id @default(cuid())
  capa_id     String
  update_text String
  status      String?
  updated_by  String
  updated_at  DateTime @default(now())
  updater     Employee @relation(fields: [updated_by], references: [id])
  capa        CAPATask @relation("CAPATaskUpdates", fields: [capa_id], references: [id])

  @@map("capa_updates")
}

model QualityMetric {
  id                 String             @id @default(cuid())
  workspace_id       String
  metric_name        String
  metric_type        String
  category           String
  target_value       Float
  warning_limit      Float?
  control_limit      Float?
  lower_warning      Float?
  lower_control      Float?
  unit               String?
  calculation_method String?
  frequency          String             @default("DAILY")
  is_active          Boolean            @default(true)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  data_points        QualityDataPoint[]
  workspace          Workspace          @relation(fields: [workspace_id], references: [id])

  @@map("quality_metrics")
}

model QualityDataPoint {
  id                 String          @id @default(cuid())
  workspace_id       String
  metric_id          String
  measured_value     Float
  sample_size        Int?
  measurement_date   DateTime
  shift              String?
  production_line_id String?
  order_id           String?
  operator_id        String?
  notes              String?
  is_outlier         Boolean         @default(false)
  created_by         String
  created_at         DateTime        @default(now())
  creator            Employee        @relation("EmployeeQualityDataCreator", fields: [created_by], references: [id])
  operator           Employee?       @relation("EmployeeQualityDataOperator", fields: [operator_id], references: [id])
  order              Order?          @relation(fields: [order_id], references: [id])
  production_line    ProductionLine? @relation(fields: [production_line_id], references: [id])
  metric             QualityMetric   @relation(fields: [metric_id], references: [id])
  workspace          Workspace       @relation(fields: [workspace_id], references: [id])

  @@map("quality_data_points")
}

model QualityPrediction {
  id               String    @id @default(cuid())
  workspace_id     String
  order_id         String
  prediction_type  String
  predicted_value  Float
  confidence_level Float
  risk_factors     String
  recommendations  String
  prediction_date  DateTime  @default(now())
  actual_outcome   Float?
  accuracy_score   Float?
  model_version    String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  order            Order     @relation(fields: [order_id], references: [id])
  workspace        Workspace @relation(fields: [workspace_id], references: [id])

  @@map("quality_predictions")
}

model DesignCollaboration {
  id                String          @id @default(cuid())
  workspace_id      String
  design_asset_id   String
  version_id        String
  collaborator_id   String
  collaborator_type String
  permission_level  String
  invited_by        String
  invited_at        DateTime        @default(now())
  accepted_at       DateTime?
  last_accessed     DateTime?
  is_active         Boolean         @default(true)
  inviter           Employee        @relation(fields: [invited_by], references: [id])
  design_version    DesignVersion   @relation(fields: [version_id], references: [id])
  design_asset      DesignAsset     @relation(fields: [design_asset_id], references: [id])
  workspace         Workspace       @relation(fields: [workspace_id], references: [id])
  comments          DesignComment[]

  @@map("design_collaborations")
}

model DesignComment {
  id                String               @id @default(cuid())
  workspace_id      String
  design_asset_id   String
  version_id        String
  collaboration_id  String?
  comment_text      String
  comment_type      String               @default("GENERAL")
  position_x        Float?
  position_y        Float?
  annotation_area   String?
  priority          String               @default("NORMAL")
  status            String               @default("OPEN")
  parent_comment_id String?
  attachments       String?
  mentioned_users   String?
  ashley_analysis   String?
  created_by        String
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  resolved_by       String?
  resolved_at       DateTime?
  resolver          Employee?            @relation("CommentResolver", fields: [resolved_by], references: [id])
  creator           Employee             @relation(fields: [created_by], references: [id])
  parent_comment    DesignComment?       @relation("CommentThread", fields: [parent_comment_id], references: [id])
  replies           DesignComment[]      @relation("CommentThread")
  collaboration     DesignCollaboration? @relation(fields: [collaboration_id], references: [id])
  design_version    DesignVersion        @relation(fields: [version_id], references: [id])
  design_asset      DesignAsset          @relation(fields: [design_asset_id], references: [id])
  workspace         Workspace            @relation(fields: [workspace_id], references: [id])

  @@map("design_comments")
}

model DesignApprovalWorkflow {
  id                 String           @id @default(cuid())
  workspace_id       String
  workflow_name      String
  description        String?
  is_default         Boolean          @default(false)
  client_types       String?
  garment_types      String?
  approval_stages    String
  auto_advance       Boolean          @default(true)
  notification_rules String
  sla_hours          Int?
  escalation_rules   String?
  is_active          Boolean          @default(true)
  created_by         String
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  creator            Employee         @relation(fields: [created_by], references: [id])
  workspace          Workspace        @relation(fields: [workspace_id], references: [id])
  approvals          DesignApproval[] @relation("DesignApprovalWorkflowApprovals")

  @@map("design_approval_workflows")
}

model DesignFileValidation {
  id                 String        @id @default(cuid())
  workspace_id       String
  design_version_id  String
  file_url           String
  file_type          String
  file_size          Int
  validation_status  String        @default("PENDING")
  validation_results String?
  issues_found       String?
  auto_corrections   String?
  color_profile      String?
  resolution_dpi     Int?
  dimensions         String?
  color_count        Int?
  print_ready        Boolean       @default(false)
  estimated_cost     Float?
  ashley_analysis    String?
  processed_at       DateTime?
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  design_version     DesignVersion @relation(fields: [design_version_id], references: [id])
  workspace          Workspace     @relation(fields: [workspace_id], references: [id])

  @@map("design_file_validations")
}

model DesignTemplate {
  id               String    @id @default(cuid())
  workspace_id     String
  template_name    String
  category         String
  subcategory      String?
  description      String?
  preview_url      String
  file_urls        String
  print_methods    String
  garment_types    String
  color_variations String
  size_variations  String
  tags             String?
  usage_count      Int       @default(0)
  rating           Float?
  is_premium       Boolean   @default(false)
  is_active        Boolean   @default(true)
  created_by       String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  creator          Employee  @relation(fields: [created_by], references: [id])
  workspace        Workspace @relation(fields: [workspace_id], references: [id])

  @@map("design_templates")
}

model DesignMockup {
  id                String        @id @default(cuid())
  workspace_id      String
  design_version_id String
  mockup_type       String
  garment_style     String
  garment_color     String
  mockup_url        String
  generation_status String        @default("PENDING")
  generation_params String?
  processing_time   Float?
  file_size         Int?
  is_client_facing  Boolean       @default(true)
  watermarked       Boolean       @default(true)
  high_res_url      String?
  created_by        String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  creator           Employee?     @relation(fields: [created_by], references: [id])
  design_version    DesignVersion @relation(fields: [design_version_id], references: [id])
  workspace         Workspace     @relation(fields: [workspace_id], references: [id])

  @@map("design_mockups")
}

model DesignCostEstimate {
  id                String        @id @default(cuid())
  workspace_id      String
  design_version_id String
  estimation_type   String
  print_method      String
  color_count       Int
  complexity_score  Float
  setup_cost        Float
  unit_cost         Float
  minimum_quantity  Int
  price_breaks      String
  material_costs    String
  labor_costs       String
  overhead_costs    Float
  margin_percentage Float
  estimated_time    Float
  rush_surcharge    Float?
  ashley_insights   String?
  valid_until       DateTime
  created_by        String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  creator           Employee      @relation(fields: [created_by], references: [id])
  design_version    DesignVersion @relation(fields: [design_version_id], references: [id])
  workspace         Workspace     @relation(fields: [workspace_id], references: [id])

  @@map("design_cost_estimates")
}

model DesignProductionSpec {
  id                       String        @id @default(cuid())
  workspace_id             String
  design_version_id        String
  print_method             String
  ink_colors               String
  print_positions          String
  curing_temperature       Float?
  curing_time              Float?
  mesh_count               String?
  press_pressure           Float?
  press_time               Float?
  special_inks             String?
  pre_treatment            String?
  post_processing          String?
  quality_checkpoints      String
  production_notes         String?
  environmental_conditions String?
  safety_requirements      String?
  created_by               String
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  creator                  Employee      @relation(fields: [created_by], references: [id])
  design_version           DesignVersion @relation(fields: [design_version_id], references: [id])
  workspace                Workspace     @relation(fields: [workspace_id], references: [id])

  @@map("design_production_specs")
}

model DesignAnalytics {
  id                    String      @id @default(cuid())
  workspace_id          String
  design_asset_id       String
  metric_date           DateTime    @default(now())
  views_count           Int         @default(0)
  downloads_count       Int         @default(0)
  approval_time         Float?
  revision_count        Int         @default(0)
  client_rating         Float?
  production_efficiency Float?
  defect_rate           Float?
  reorder_rate          Float?
  profit_margin         Float?
  ashley_score          Float?
  popularity_rank       Int?
  seasonality_score     Float?
  created_at            DateTime    @default(now())
  design_asset          DesignAsset @relation(fields: [design_asset_id], references: [id])
  workspace             Workspace   @relation(fields: [workspace_id], references: [id])

  @@map("design_analytics")
}

model FinishingRun {
  id              String      @id @default(cuid())
  workspace_id    String
  order_id        String
  routing_step_id String
  operator_id     String
  status          String      @default("PENDING")
  started_at      DateTime?
  ended_at        DateTime?
  materials       String?
  notes           String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  operator        Employee    @relation("FinishingOperator", fields: [operator_id], references: [id])
  routing_step    RoutingStep @relation("RoutingStepFinishingRuns", fields: [routing_step_id], references: [id])
  order           Order       @relation(fields: [order_id], references: [id])
  workspace       Workspace   @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([routing_step_id])
  @@index([operator_id])
  @@index([status])
  @@index([created_at])
  @@map("finishing_runs")
}

model FinishedUnit {
  id              String          @id @default(cuid())
  workspace_id    String
  order_id        String
  sku             String
  size_code       String
  color           String?
  serial          String?
  packed          Boolean         @default(false)
  created_at      DateTime        @default(now())
  carton_contents CartonContent[]
  order           Order           @relation(fields: [order_id], references: [id])
  workspace       Workspace       @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([order_id])
  @@index([sku])
  @@index([created_at])
  @@map("finished_units")
}

model Carton {
  id               String           @id @default(cuid())
  workspace_id     String
  order_id         String
  carton_no        Int
  length_cm        Int?
  width_cm         Int?
  height_cm        Int?
  tare_weight_kg   Float            @default(0)
  actual_weight_kg Float            @default(0)
  dim_weight_kg    Float            @default(0)
  fill_percent     Float            @default(0)
  status           String           @default("OPEN")
  qr_code          String?          @unique
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  contents         CartonContent[]
  order            Order            @relation(fields: [order_id], references: [id])
  workspace        Workspace        @relation(fields: [workspace_id], references: [id])
  shipment_cartons ShipmentCarton[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([status])
  @@index([created_at])
  @@map("cartons")
}

model CartonContent {
  id               String       @id @default(cuid())
  carton_id        String
  finished_unit_id String
  qty              Int          @default(1)
  created_at       DateTime     @default(now())
  finished_unit    FinishedUnit @relation(fields: [finished_unit_id], references: [id])
  carton           Carton       @relation(fields: [carton_id], references: [id])

  @@map("carton_contents")
}

model Shipment {
  id                String             @id @default(cuid())
  workspace_id      String
  order_id          String
  consignee_name    String
  consignee_address String
  contact_phone     String?
  method            String
  carrier_ref       String?
  cod_amount        Float?
  status            String             @default("READY_FOR_PICKUP")
  eta               DateTime?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  cartons           ShipmentCarton[]
  deliveries        ShipmentDelivery[]
  order             Order              @relation(fields: [order_id], references: [id])
  workspace         Workspace          @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([status])
  @@index([created_at])
  @@map("shipments")
}

model ShipmentCarton {
  id          String   @id @default(cuid())
  shipment_id String
  carton_id   String
  created_at  DateTime @default(now())
  carton      Carton   @relation(fields: [carton_id], references: [id])
  shipment    Shipment @relation(fields: [shipment_id], references: [id])

  @@map("shipment_cartons")
}

model Delivery {
  id                      String                  @id @default(cuid())
  workspace_id            String
  order_id                String
  delivery_reference      String                  @unique
  carrier_name            String
  tracking_number         String?
  status                  String                  @default("PENDING")
  estimated_delivery_date DateTime?
  actual_delivery_date    DateTime?
  delivery_address        String
  special_instructions    String?
  current_location        String?
  latitude                Float?
  longitude               Float?
  created_at              DateTime                @default(now())
  updated_at              DateTime                @updatedAt
  order                   Order                   @relation(fields: [order_id], references: [id])
  workspace               Workspace               @relation(fields: [workspace_id], references: [id])
  tracking_events         DeliveryTrackingEvent[]
  pod_records             PODRecord[]
  shipments               ShipmentDelivery[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([order_id])
  @@index([status])
  @@index([created_at])
  @@map("deliveries")
}

model ShipmentDelivery {
  id          String   @id @default(cuid())
  delivery_id String
  shipment_id String
  created_at  DateTime @default(now())
  shipment    Shipment @relation(fields: [shipment_id], references: [id])
  delivery    Delivery @relation(fields: [delivery_id], references: [id])

  @@map("shipment_deliveries")
}

model DeliveryTrackingEvent {
  id          String   @id @default(cuid())
  delivery_id String
  status      String
  location    String?
  description String?
  latitude    Float?
  longitude   Float?
  timestamp   DateTime @default(now())
  created_at  DateTime @default(now())
  delivery    Delivery @relation(fields: [delivery_id], references: [id])

  @@map("delivery_tracking_events")
}

model PODRecord {
  id              String    @id @default(cuid())
  workspace_id    String
  delivery_id     String
  shipment_id     String?
  carton_id       String?
  recipient_name  String
  recipient_phone String?
  signature_url   String?
  photo_urls      String?
  notes           String?
  latitude        Float?
  longitude       Float?
  geolocation     String?
  delivery_status String    @default("DELIVERED")
  cod_amount      Float?
  cod_collected   Float?
  cod_reference   String?
  timestamp       DateTime  @default(now())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  delivery        Delivery  @relation(fields: [delivery_id], references: [id])
  workspace       Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([delivery_id])
  @@map("pod_records")
}

model MaintenanceSchedule {
  id                 String      @id @default(cuid())
  workspace_id       String
  asset_id           String
  schedule_name      String
  description        String?
  maintenance_type   String
  frequency_type     String
  frequency_value    Int
  next_due_date      DateTime
  last_completed     DateTime?
  estimated_duration Float?
  priority           String      @default("MEDIUM")
  is_active          Boolean     @default(true)
  instructions       String?
  required_parts     String?
  required_skills    String?
  safety_notes       String?
  created_by         String
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  creator            User        @relation(fields: [created_by], references: [id])
  asset              Asset       @relation(fields: [asset_id], references: [id])
  workspace          Workspace   @relation(fields: [workspace_id], references: [id])
  work_orders        WorkOrder[] @relation("ScheduledMaintenance")

  @@index([workspace_id])
  @@index([workspace_id, asset_id])
  @@index([workspace_id, is_active])
  @@index([asset_id])
  @@index([frequency_type])
  @@index([is_active])
  @@index([next_due_date])
  @@index([created_at])
  @@map("maintenance_schedules")
}

model DemandForecast {
  id                 String    @id @default(cuid())
  workspace_id       String
  client_id          String?
  brand_id           String?
  product_category   String?
  product_type       String?
  forecast_period    String
  forecast_date      DateTime
  predicted_quantity Int
  predicted_revenue  Float
  confidence_score   Float
  seasonal_factor    Float?
  trend_factor       Float?
  external_factors   String?
  model_version      String
  accuracy_score     Float?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  brand              Brand?    @relation(fields: [brand_id], references: [id])
  client             Client?   @relation(fields: [client_id], references: [id])
  workspace          Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, client_id])
  @@index([workspace_id, brand_id])
  @@index([client_id])
  @@index([brand_id])
  @@index([forecast_period])
  @@index([forecast_date])
  @@index([created_at])
  @@map("demand_forecasts")
}

model ProductRecommendation {
  id                       String    @id @default(cuid())
  workspace_id             String
  client_id                String
  recommendation_type      String
  source_product_type      String?
  recommended_product_type String
  recommended_category     String?
  confidence_score         Float
  expected_quantity        Int?
  expected_revenue         Float?
  reasoning                String?
  seasonal_relevance       Float?
  trend_alignment          Float?
  historical_success       Float?
  expires_at               DateTime?
  is_accepted              Boolean   @default(false)
  accepted_at              DateTime?
  actual_quantity          Int?
  actual_revenue           Float?
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  client                   Client    @relation(fields: [client_id], references: [id])
  workspace                Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, client_id])
  @@index([workspace_id, recommendation_type])
  @@index([client_id])
  @@index([recommendation_type])
  @@index([confidence_score])
  @@index([created_at])
  @@map("product_recommendations")
}

model MarketTrend {
  id                   String    @id @default(cuid())
  workspace_id         String
  trend_name           String
  trend_category       String
  trend_type           String
  product_categories   String
  geographic_scope     String
  confidence_score     Float
  impact_score         Float
  adoption_rate        Float?
  peak_period_start    DateTime?
  peak_period_end      DateTime?
  data_sources         String
  keywords             String?
  color_palette        String?
  style_attributes     String?
  target_demographics  String?
  competitive_analysis String?
  opportunity_score    Float?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  workspace            Workspace @relation(fields: [workspace_id], references: [id])

  @@map("market_trends")
}

model InventoryInsight {
  id                   String    @id @default(cuid())
  workspace_id         String
  material_id          String?
  product_category     String?
  insight_type         String
  current_stock_level  Float?
  optimal_stock_level  Float
  reorder_point        Float?
  reorder_quantity     Float?
  lead_time_days       Int?
  carrying_cost        Float?
  stockout_risk        Float
  demand_variability   Float?
  seasonal_adjustment  Float?
  supplier_reliability Float?
  cost_impact          Float?
  priority_score       Float
  reasoning            String?
  expires_at           DateTime?
  is_acknowledged      Boolean   @default(false)
  acknowledged_at      DateTime?
  action_taken         String?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  workspace            Workspace @relation(fields: [workspace_id], references: [id])

  @@map("inventory_insights")
}

model AIModelMetrics {
  id                    String    @id @default(cuid())
  workspace_id          String
  model_name            String
  model_version         String
  model_type            String
  training_data_period  String?
  training_date         DateTime
  validation_score      Float?
  production_metrics    String
  feature_importance    String?
  hyperparameters       String?
  data_quality_score    Float?
  prediction_count      Int       @default(0)
  correct_predictions   Int       @default(0)
  accuracy_trend        String?
  last_retrain_date     DateTime?
  next_retrain_date     DateTime?
  is_active             Boolean   @default(true)
  performance_threshold Float?
  alert_threshold       Float?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  workspace             Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, model_name])
  @@index([workspace_id, model_version])
  @@index([model_name])
  @@index([model_version])
  @@index([created_at])
  @@map("ai_model_metrics")
}

model CustomerSegment {
  id                    String    @id @default(cuid())
  workspace_id          String
  segment_name          String
  segment_description   String?
  segmentation_criteria String
  customer_count        Int
  avg_order_value       Float?
  avg_order_frequency   Float?
  total_revenue         Float?
  profit_margin         Float?
  retention_rate        Float?
  churn_risk            Float?
  preferred_products    String?
  preferred_seasons     String?
  price_sensitivity     Float?
  lead_time_tolerance   Float?
  communication_prefs   String?
  growth_potential      Float?
  marketing_strategy    String?
  last_updated          DateTime
  is_active             Boolean   @default(true)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  workspace             Workspace @relation(fields: [workspace_id], references: [id])

  @@map("customer_segments")
}

model ClientSession {
  id           String    @id @default(cuid())
  workspace_id String
  client_id    String
  email        String
  magic_token  String    @unique
  is_used      Boolean   @default(false)
  expires_at   DateTime
  created_at   DateTime  @default(now())
  client       Client    @relation(fields: [client_id], references: [id])
  workspace    Workspace @relation(fields: [workspace_id], references: [id])

  @@unique([workspace_id, magic_token])
  @@index([workspace_id])
  @@index([workspace_id, client_id])
  @@index([workspace_id, is_used])
  @@index([client_id])
  @@index([magic_token])
  @@index([is_used])
  @@index([expires_at])
  @@index([created_at])
  @@map("client_sessions")
}

model ClientNotification {
  id            String    @id @default(cuid())
  workspace_id  String
  client_id     String
  type          String
  title         String
  message       String
  action_url    String?
  is_read       Boolean   @default(false)
  is_email_sent Boolean   @default(false)
  priority      String    @default("MEDIUM")
  metadata      String?
  created_at    DateTime  @default(now())
  read_at       DateTime?
  client        Client    @relation(fields: [client_id], references: [id])
  workspace     Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, client_id])
  @@index([workspace_id, is_read])
  @@index([client_id])
  @@index([type])
  @@index([is_read])
  @@index([created_at])
  @@map("client_notifications")
}

model ClientActivity {
  id            String    @id @default(cuid())
  workspace_id  String
  client_id     String
  session_id    String?
  activity_type String
  resource_type String?
  resource_id   String?
  description   String?
  ip_address    String?
  user_agent    String?
  metadata      String?
  created_at    DateTime  @default(now())
  client        Client    @relation(fields: [client_id], references: [id])
  workspace     Workspace @relation(fields: [workspace_id], references: [id])

  @@map("client_activities")
}

model ClientMessage {
  id           String    @id @default(cuid())
  workspace_id String
  client_id    String
  order_id     String?
  thread_id    String?
  sender_type  String
  sender_name  String
  sender_email String?
  subject      String?
  message      String
  attachments  String?
  is_read      Boolean   @default(false)
  is_internal  Boolean   @default(false)
  priority     String    @default("NORMAL")
  status       String    @default("OPEN")
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  order        Order?    @relation(fields: [order_id], references: [id])
  client       Client    @relation(fields: [client_id], references: [id])
  workspace    Workspace @relation(fields: [workspace_id], references: [id])

  @@map("client_messages")
}

model ClientPortalSettings {
  id                     String    @id @default(cuid())
  workspace_id           String
  client_id              String
  email_notifications    Boolean   @default(true)
  sms_notifications      Boolean   @default(false)
  push_notifications     Boolean   @default(true)
  notification_frequency String    @default("REAL_TIME")
  preferred_language     String    @default("en")
  timezone               String    @default("UTC")
  theme                  String    @default("LIGHT")
  dashboard_layout       String?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  client                 Client    @relation("ClientPortalSettings", fields: [client_id], references: [id])
  workspace              Workspace @relation(fields: [workspace_id], references: [id])

  @@unique([workspace_id, client_id])
  @@map("client_portal_settings")
}

model AutomationRule {
  id              String                @id @default(cuid())
  workspace_id    String
  name            String
  description     String?
  is_active       Boolean               @default(true)
  trigger_type    String
  trigger_config  String
  conditions      String?
  actions         String
  priority        Int                   @default(1)
  last_executed   DateTime?
  execution_count Int                   @default(0)
  error_count     Int                   @default(0)
  created_by      String
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  executions      AutomationExecution[]
  user            User                  @relation("AutomationRuleCreator", fields: [created_by], references: [id])
  workspace       Workspace             @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, trigger_type])
  @@index([trigger_type])
  @@index([is_active])
  @@index([created_at])
  @@map("automation_rules")
}

model AutomationExecution {
  id                String         @id @default(cuid())
  workspace_id      String
  rule_id           String
  trigger_data      String?
  execution_status  String
  actions_executed  String?
  error_message     String?
  execution_time_ms Int?
  started_at        DateTime       @default(now())
  completed_at      DateTime?
  rule              AutomationRule @relation(fields: [rule_id], references: [id])
  workspace         Workspace      @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, execution_status])
  @@index([rule_id])
  @@index([execution_status])
  @@index([started_at])
  @@index([completed_at])
  @@map("automation_executions")
}

model NotificationTemplate {
  id               String         @id @default(cuid())
  workspace_id     String
  name             String
  category         String
  type             String
  subject_template String?
  body_template    String
  variables        String?
  is_active        Boolean        @default(true)
  is_system        Boolean        @default(false)
  created_by       String
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  user             User           @relation("NotificationTemplateCreator", fields: [created_by], references: [id])
  workspace        Workspace      @relation(fields: [workspace_id], references: [id])
  notifications    Notification[]

  @@map("notification_templates")
}

model Notification {
  id              String                @id @default(cuid())
  workspace_id    String
  template_id     String?
  recipient_type  String
  recipient_id    String?
  recipient_email String?
  recipient_phone String?
  channel         String
  subject         String?
  content         String
  variables_data  String?
  priority        String                @default("MEDIUM")
  status          String                @default("PENDING")
  scheduled_for   DateTime?
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  retry_count     Int                   @default(0)
  max_retries     Int                   @default(3)
  metadata        String?
  created_at      DateTime              @default(now())
  template        NotificationTemplate? @relation(fields: [template_id], references: [id])
  workspace       Workspace             @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, channel])
  @@index([template_id])
  @@index([status])
  @@index([channel])
  @@index([scheduled_for])
  @@index([sent_at])
  @@index([created_at])
  @@map("notifications")
}

model Alert {
  id                 String    @id @default(cuid())
  workspace_id       String
  alert_type         String
  severity           String
  title              String
  description        String
  source_type        String
  source_id          String?
  threshold_value    String?
  current_value      String?
  is_acknowledged    Boolean   @default(false)
  acknowledged_by    String?
  acknowledged_at    DateTime?
  is_resolved        Boolean   @default(false)
  resolved_by        String?
  resolved_at        DateTime?
  resolution_notes   String?
  escalation_level   Int       @default(1)
  next_escalation_at DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  resolved_user      User?     @relation("AlertResolver", fields: [resolved_by], references: [id])
  acknowledged_user  User?     @relation("AlertAcknowledger", fields: [acknowledged_by], references: [id])
  workspace          Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, severity])
  @@index([workspace_id, alert_type])
  @@index([workspace_id, is_acknowledged])
  @@index([workspace_id, is_resolved])
  @@index([severity])
  @@index([alert_type])
  @@index([acknowledged_by])
  @@index([resolved_by])
  @@index([is_acknowledged])
  @@index([is_resolved])
  @@index([created_at])
  @@map("alerts")
}

model Integration {
  id             String               @id @default(cuid())
  workspace_id   String
  name           String
  type           String
  provider       String
  config         String
  is_active      Boolean              @default(true)
  is_connected   Boolean              @default(false)
  last_sync      DateTime?
  sync_frequency String?
  error_count    Int                  @default(0)
  last_error     String?
  created_by     String
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt
  sync_logs      IntegrationSyncLog[]
  user           User                 @relation("IntegrationCreator", fields: [created_by], references: [id])
  workspace      Workspace            @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([workspace_id, type])
  @@index([type])
  @@index([is_active])
  @@index([created_at])
  @@map("integrations")
}

model IntegrationSyncLog {
  id                String      @id @default(cuid())
  workspace_id      String
  integration_id    String
  sync_type         String
  operation         String
  entity_type       String
  records_processed Int         @default(0)
  records_success   Int         @default(0)
  records_failed    Int         @default(0)
  status            String
  error_details     String?
  started_at        DateTime    @default(now())
  completed_at      DateTime?
  duration_ms       Int?
  integration       Integration @relation(fields: [integration_id], references: [id])
  workspace         Workspace   @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([integration_id])
  @@index([status])
  @@index([started_at])
  @@index([completed_at])
  @@map("integration_sync_logs")
}

model AIChatConversation {
  id              String          @id @default(cuid())
  workspace_id    String
  user_id         String?
  title           String?
  context_type    String          @default("GENERAL")
  context_id      String?
  is_archived     Boolean         @default(false)
  is_pinned       Boolean         @default(false)
  last_message_at DateTime        @default(now())
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  user            User?           @relation("AIChatUser", fields: [user_id], references: [id])
  workspace       Workspace       @relation(fields: [workspace_id], references: [id])
  messages        AIChatMessage[]

  @@index([workspace_id])
  @@index([workspace_id, user_id])
  @@index([workspace_id, context_type])
  @@index([user_id])
  @@index([is_archived])
  @@index([last_message_at])
  @@index([created_at])
  @@map("ai_chat_conversations")
}

model AIChatMessage {
  id              String             @id @default(cuid())
  conversation_id String
  role            String
  content         String
  message_type    String             @default("TEXT")
  attachments     String?
  metadata        String?
  function_calls  String?
  feedback        String?
  feedback_reason String?
  is_edited       Boolean            @default(false)
  edited_at       DateTime?
  created_at      DateTime           @default(now())
  conversation    AIChatConversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@index([conversation_id])
  @@index([role])
  @@index([created_at])
  @@map("ai_chat_messages")
}

model AIChatSuggestion {
  id              String    @id @default(cuid())
  workspace_id    String
  suggestion_type String
  category        String
  title           String
  description     String
  confidence      Float
  priority        String    @default("MEDIUM")
  action_type     String?
  action_data     String?
  is_dismissed    Boolean   @default(false)
  is_acted_upon   Boolean   @default(false)
  dismissed_by    String?
  dismissed_at    DateTime?
  acted_by        String?
  acted_at        DateTime?
  valid_until     DateTime?
  created_at      DateTime  @default(now())
  acted_user      User?     @relation("SuggestionActor", fields: [acted_by], references: [id])
  dismissed_user  User?     @relation("SuggestionDismisser", fields: [dismissed_by], references: [id])
  workspace       Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, is_dismissed])
  @@index([workspace_id, category])
  @@index([suggestion_type])
  @@index([priority])
  @@index([is_dismissed])
  @@index([is_acted_upon])
  @@index([created_at])
  @@map("ai_chat_suggestions")
}

model AIChatKnowledge {
  id                String    @id @default(cuid())
  workspace_id      String
  category          String
  question          String
  answer            String
  keywords          String?
  examples          String?
  related_topics    String?
  usage_count       Int       @default(0)
  helpful_count     Int       @default(0)
  not_helpful_count Int       @default(0)
  is_system         Boolean   @default(false)
  is_active         Boolean   @default(true)
  created_by        String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  user              User?     @relation("KnowledgeCreator", fields: [created_by], references: [id])
  workspace         Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, category])
  @@index([workspace_id, is_active])
  @@index([category])
  @@index([is_active])
  @@index([created_at])
  @@map("ai_chat_knowledge")
}

model CustomReport {
  id              String            @id @default(cuid())
  workspace_id    String
  name            String
  description     String?
  report_type     String
  data_source     String
  query_config    String
  visualization   String?
  columns         String
  filters         String?
  sort_order      String?
  schedule        String?
  schedule_config String?
  is_public       Boolean           @default(false)
  is_favorite     Boolean           @default(false)
  view_count      Int               @default(0)
  created_by      String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  creator         User              @relation("ReportCreator", fields: [created_by], references: [id])
  workspace       Workspace         @relation(fields: [workspace_id], references: [id])
  executions      ReportExecution[]
  exports         ReportExport[]
  shares          ReportShare[]

  @@index([workspace_id])
  @@index([workspace_id, is_public])
  @@index([workspace_id, created_by])
  @@index([report_type])
  @@index([data_source])
  @@index([is_favorite])
  @@index([created_at])
  @@map("custom_reports")
}

model ReportExecution {
  id              String       @id @default(cuid())
  report_id       String
  workspace_id    String
  executed_by     String
  execution_time  Int
  row_count       Int
  status          String
  error_message   String?
  filters_applied String?
  executed_at     DateTime     @default(now())
  user            User         @relation("ReportExecutor", fields: [executed_by], references: [id])
  workspace       Workspace    @relation(fields: [workspace_id], references: [id])
  report          CustomReport @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@index([report_id])
  @@index([workspace_id])
  @@index([executed_by])
  @@index([status])
  @@index([executed_at])
  @@map("report_executions")
}

model ReportExport {
  id             String       @id @default(cuid())
  report_id      String
  workspace_id   String
  format         String
  file_path      String?
  file_size      Int?
  download_count Int          @default(0)
  expires_at     DateTime?
  exported_by    String
  exported_at    DateTime     @default(now())
  user           User         @relation("ReportExporter", fields: [exported_by], references: [id])
  workspace      Workspace    @relation(fields: [workspace_id], references: [id])
  report         CustomReport @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@index([report_id])
  @@index([workspace_id])
  @@index([exported_by])
  @@index([exported_at])
  @@index([expires_at])
  @@map("report_exports")
}

model ReportShare {
  id           String       @id @default(cuid())
  report_id    String
  workspace_id String
  shared_with  String
  permission   String
  can_export   Boolean      @default(true)
  can_schedule Boolean      @default(false)
  shared_by    String
  shared_at    DateTime     @default(now())
  accessed_at  DateTime?
  sharer       User         @relation("ReportSharer", fields: [shared_by], references: [id])
  workspace    Workspace    @relation(fields: [workspace_id], references: [id])
  report       CustomReport @relation(fields: [report_id], references: [id], onDelete: Cascade)

  @@index([report_id])
  @@index([workspace_id])
  @@index([shared_with])
  @@index([shared_by])
  @@map("report_shares")
}

model ExecutiveDashboard {
  id               String            @id @default(cuid())
  workspace_id     String
  name             String
  description      String?
  dashboard_type   String
  layout           String
  widgets          String
  refresh_interval Int               @default(300)
  is_default       Boolean           @default(false)
  is_active        Boolean           @default(true)
  created_by       String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  widgets_data     DashboardWidget[]
  creator          User              @relation("DashboardCreator", fields: [created_by], references: [id])
  workspace        Workspace         @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, is_default])
  @@index([dashboard_type])
  @@index([is_active])
  @@map("executive_dashboards")
}

model DashboardWidget {
  id               String             @id @default(cuid())
  dashboard_id     String
  workspace_id     String
  widget_type      String
  title            String
  data_source      String
  query_params     String?
  visualization    String
  position         String
  refresh_interval Int?
  last_refreshed   DateTime?
  is_visible       Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  workspace        Workspace          @relation(fields: [workspace_id], references: [id])
  dashboard        ExecutiveDashboard @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)

  @@index([dashboard_id])
  @@index([workspace_id])
  @@index([widget_type])
  @@map("dashboard_widgets")
}

model AnalyticsEvent {
  id             String    @id @default(cuid())
  workspace_id   String
  event_type     String
  event_category String
  event_name     String
  event_data     String?
  user_id        String?
  session_id     String?
  ip_address     String?
  user_agent     String?
  created_at     DateTime  @default(now())
  user           User?     @relation("AnalyticsEventUser", fields: [user_id], references: [id])
  workspace      Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, event_type])
  @@index([workspace_id, event_category])
  @@index([user_id])
  @@index([created_at])
  @@map("analytics_events")
}

model ProductionHeatmap {
  id              String    @id @default(cuid())
  workspace_id    String
  date            DateTime
  hour            Int
  shift           String?
  station_type    String
  station_id      String?
  efficiency      Float
  output_units    Int
  target_units    Int
  defect_rate     Float
  downtime_mins   Int
  operators_count Int
  created_at      DateTime  @default(now())
  workspace       Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, date])
  @@index([workspace_id, station_type])
  @@index([workspace_id, date, hour])
  @@index([date, station_type])
  @@map("production_heatmaps")
}

model ProfitAnalysis {
  id              String    @id @default(cuid())
  workspace_id    String
  order_id        String
  client_id       String
  analysis_date   DateTime  @default(now())
  total_revenue   Float
  base_price      Float
  rush_fee        Float     @default(0)
  design_fee      Float     @default(0)
  shipping_fee    Float     @default(0)
  total_cost      Float
  material_cost   Float
  labor_cost      Float
  overhead_cost   Float
  shipping_cost   Float     @default(0)
  wastage_cost    Float     @default(0)
  gross_profit    Float
  gross_margin    Float
  net_profit      Float
  net_margin      Float
  production_days Int
  lead_time_days  Int
  notes           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  client          Client    @relation(fields: [client_id], references: [id])
  order           Order     @relation(fields: [order_id], references: [id])
  workspace       Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, client_id])
  @@index([workspace_id, order_id])
  @@index([workspace_id, analysis_date])
  @@index([client_id])
  @@index([order_id])
  @@index([gross_margin])
  @@index([net_margin])
  @@map("profit_analyses")
}

model OrderActivityLog {
  id           String    @id @default(cuid())
  workspace_id String
  order_id     String
  event_type   String
  title        String
  description  String?
  performed_by String?
  metadata     String?
  created_at   DateTime  @default(now())
  order        Order     @relation(fields: [order_id], references: [id])
  workspace    Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, order_id])
  @@index([workspace_id, created_at])
  @@index([order_id])
  @@index([order_id, created_at])
  @@index([event_type])
  @@index([created_at])
  @@map("order_activity_logs")
}

// ============================================
// INVENTORY MANAGEMENT MODELS (Added 2025-10-28)
// ============================================

model Supplier {
  id              String          @id @default(cuid())
  workspace_id    String
  supplier_code   String
  name            String
  contact_person  String?
  email           String?
  phone           String?
  address         String?
  city            String?
  country         String?         @default("Philippines")
  payment_terms   String?
  currency        String          @default("PHP")
  tax_id          String?
  rating          Float?
  is_active       Boolean         @default(true)
  notes           String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  workspace       Workspace       @relation("WorkspaceSuppliers", fields: [workspace_id], references: [id])
  purchase_orders PurchaseOrder[]

  @@unique([workspace_id, supplier_code])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([supplier_code])
  @@map("suppliers")
}

model PurchaseOrder {
  id                String              @id @default(cuid())
  workspace_id      String
  po_number         String
  supplier_id       String
  order_date        DateTime            @default(now())
  expected_delivery DateTime?
  actual_delivery   DateTime?
  status            String              @default("DRAFT")
  subtotal          Float               @default(0)
  tax_amount        Float               @default(0)
  shipping_cost     Float               @default(0)
  total_amount      Float               @default(0)
  currency          String              @default("PHP")
  payment_terms     String?
  payment_status    String              @default("UNPAID")
  notes             String?
  approved_by       String?
  approved_at       DateTime?
  created_by        String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  workspace         Workspace           @relation("WorkspacePurchaseOrders", fields: [workspace_id], references: [id])
  supplier          Supplier            @relation(fields: [supplier_id], references: [id])
  created_by_user   User                @relation("PurchaseOrderCreatedBy", fields: [created_by], references: [id])
  approved_by_user  User?               @relation("PurchaseOrderApprovedBy", fields: [approved_by], references: [id])
  items             PurchaseOrderItem[]

  @@unique([workspace_id, po_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, supplier_id])
  @@index([status])
  @@index([order_date])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id                String        @id @default(cuid())
  purchase_order_id String
  material_name     String
  material_type     String
  description       String?
  quantity          Float
  unit              String
  unit_price        Float
  tax_rate          Float         @default(0)
  discount_percent  Float         @default(0)
  total_price       Float
  received_quantity Float         @default(0)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  purchase_order    PurchaseOrder @relation(fields: [purchase_order_id], references: [id], onDelete: Cascade)

  @@index([purchase_order_id])
  @@map("purchase_order_items")
}

model AutoReorderSetting {
  id                    String    @id @default(cuid())
  workspace_id          String
  material_inventory_id String    @unique
  enabled               Boolean   @default(true)
  reorder_point         Float
  reorder_quantity      Float
  preferred_supplier_id String?
  lead_time_days        Int?
  safety_stock_days     Int?      @default(7)
  notes                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  workspace             Workspace @relation("WorkspaceAutoReorderSettings", fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, enabled])
  @@map("auto_reorder_settings")
}

// ============================================
// QR-BASED INVENTORY SYSTEM (Added 2025-10-30)
// For Store/Cashier/Warehouse retail inventory
// ============================================

// Retail Products (different from manufacturing materials)
model InventoryProduct {
  id           String           @id @default(cuid())
  workspace_id String
  name         String
  description  String?
  photo_url    String?
  base_sku     String
  category     String?
  is_active    Boolean          @default(true)
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  workspace    Workspace        @relation(fields: [workspace_id], references: [id])
  variants     ProductVariant[]

  @@unique([workspace_id, base_sku])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([base_sku])
  @@index([category])
  @@map("inventory_products")
}

// Product Variants (size, color, etc.)
model ProductVariant {
  id           String           @id @default(cuid())
  product_id   String
  variant_name String // e.g., "Red-Large", "Blue-Small"
  sku          String           @unique
  barcode      String?          @unique
  qr_code      String?          @unique
  price        Float
  cost         Float?
  size         String?
  color        String?
  is_active    Boolean          @default(true)
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  product      InventoryProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)
  stock_ledger StockLedger[]
  sale_items   RetailSaleItem[]

  @@index([product_id])
  @@index([sku])
  @@index([barcode])
  @@index([qr_code])
  @@map("product_variants")
}

// Store and Warehouse Locations
model StoreLocation {
  id                   String              @id @default(cuid())
  workspace_id         String
  location_code        String // STORE_MAIN, WH_MAIN, etc.
  location_name        String
  location_type        String // STORE, WAREHOUSE
  address              String?
  is_active            Boolean             @default(true)
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  workspace            Workspace           @relation(fields: [workspace_id], references: [id])
  stock_ledger         StockLedger[]
  warehouse_deliveries WarehouseDelivery[]

  @@unique([workspace_id, location_code])
  @@index([workspace_id])
  @@index([workspace_id, is_active])
  @@index([location_type])
  @@map("store_locations")
}

// Stock Movement Ledger (tracks all in/out movements)
model StockLedger {
  id               String         @id @default(cuid())
  workspace_id     String
  variant_id       String
  location_id      String
  transaction_type String // IN, OUT, TRANSFER, ADJUSTMENT, SALE
  quantity_change  Float // positive for IN, negative for OUT
  quantity_before  Float
  quantity_after   Float
  reference_type   String? // SALE, DELIVERY, TRANSFER, ADJUSTMENT
  reference_id     String?
  notes            String?
  performed_by     String?
  created_at       DateTime       @default(now())
  workspace        Workspace      @relation(fields: [workspace_id], references: [id])
  variant          ProductVariant @relation(fields: [variant_id], references: [id])
  location         StoreLocation  @relation(fields: [location_id], references: [id])
  user             User?          @relation("StockLedgerUser", fields: [performed_by], references: [id])

  @@index([workspace_id])
  @@index([workspace_id, variant_id])
  @@index([workspace_id, location_id])
  @@index([workspace_id, created_at])
  @@index([variant_id, location_id])
  @@index([transaction_type])
  @@index([reference_type, reference_id])
  @@map("stock_ledger")
}

// Retail Sales (POS transactions)
model RetailSale {
  id              String           @id @default(cuid())
  workspace_id    String
  sale_number     String
  sale_date       DateTime         @default(now())
  subtotal        Float
  tax_amount      Float            @default(0)
  discount_amount Float            @default(0)
  total_amount    Float
  payment_method  String // CASH, CARD, GCASH, etc.
  payment_status  String           @default("PAID") // PAID, PENDING, CANCELLED
  cashier_id      String?
  notes           String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  workspace       Workspace        @relation(fields: [workspace_id], references: [id])
  cashier         User?            @relation("RetailSaleCashier", fields: [cashier_id], references: [id])
  items           RetailSaleItem[]

  @@unique([workspace_id, sale_number])
  @@index([workspace_id])
  @@index([workspace_id, sale_date])
  @@index([workspace_id, payment_status])
  @@index([sale_date])
  @@index([cashier_id])
  @@map("retail_sales")
}

// Retail Sale Items
model RetailSaleItem {
  id          String         @id @default(cuid())
  sale_id     String
  variant_id  String
  quantity    Float
  unit_price  Float
  discount    Float          @default(0)
  total_price Float
  created_at  DateTime       @default(now())
  sale        RetailSale     @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  variant     ProductVariant @relation(fields: [variant_id], references: [id])

  @@index([sale_id])
  @@index([variant_id])
  @@map("retail_sale_items")
}

// Warehouse Deliveries (incoming stock)
model WarehouseDelivery {
  id                    String                  @id @default(cuid())
  workspace_id          String
  delivery_number       String
  delivery_date         DateTime                @default(now())
  supplier_name         String?
  receiving_location_id String
  status                String                  @default("PENDING") // PENDING, RECEIVED, CANCELLED
  notes                 String?
  received_by           String?
  received_at           DateTime?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  workspace             Workspace               @relation(fields: [workspace_id], references: [id])
  receiving_location    StoreLocation           @relation(fields: [receiving_location_id], references: [id])
  receiver              User?                   @relation("DeliveryReceiver", fields: [received_by], references: [id])
  items                 WarehouseDeliveryItem[]

  @@unique([workspace_id, delivery_number])
  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([workspace_id, delivery_date])
  @@index([receiving_location_id])
  @@map("warehouse_deliveries")
}

// Warehouse Delivery Items
model WarehouseDeliveryItem {
  id          String            @id @default(cuid())
  delivery_id String
  variant_id  String
  quantity    Float
  notes       String?
  created_at  DateTime          @default(now())
  delivery    WarehouseDelivery @relation(fields: [delivery_id], references: [id], onDelete: Cascade)

  @@index([delivery_id])
  @@index([variant_id])
  @@map("warehouse_delivery_items")
}
