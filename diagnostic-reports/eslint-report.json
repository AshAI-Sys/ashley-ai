
> ash-ai@1.1.0 lint C:\Users\Khell\Desktop\Ashley AI
> turbo run lint --continue -- --max-warnings=0 "--format" "json"

turbo 2.5.8

• Packages in scope: @ash-ai/ai, @ash-ai/auth, @ash-ai/database, @ash-ai/design, @ash-ai/eslint-config, @ash-ai/production, @ash-ai/quality, @ash-ai/typescript-config, @ash-ai/ui, @ash/admin, @ash/events, @ash/portal, @ash/shared, @ash/types
• Running lint in 14 packages
• Remote caching disabled
@ash/types:lint: cache miss, executing a36c8745c7ddadff
@ash/admin:lint: cache miss, executing fca497af3f7b1536
@ash-ai/database:db:generate: cache bypass, force executing 0d5daf24b6565f4c
@ash/types:build: cache miss, executing 623984a29d782552
@ash-ai/ui:build: cache miss, executing f42ea292adc7a9f2
@ash-ai/ui:lint: cache miss, executing 927c75d24abc8ede
@ash/types:lint: 
@ash/types:lint: > @ash/types@1.0.0 lint C:\Users\Khell\Desktop\Ashley AI\packages\types
@ash/types:lint: > eslint src --ext .ts "--max-warnings=0" "--format" "json"
@ash/types:lint: 
@ash-ai/ui:build: 
@ash-ai/ui:build: > @ash-ai/ui@0.0.0 build C:\Users\Khell\Desktop\Ashley AI\packages\ui
@ash-ai/ui:build: > tsc
@ash-ai/ui:build: 
@ash-ai/database:db:generate: 
@ash-ai/database:db:generate: > @ash-ai/database@0.0.0 db:generate C:\Users\Khell\Desktop\Ashley AI\packages\database
@ash-ai/database:db:generate: > npx prisma generate
@ash-ai/database:db:generate: 
@ash/admin:lint: 
@ash/admin:lint: > @ash/admin@1.0.0 lint C:\Users\Khell\Desktop\Ashley AI\services\ash-admin
@ash/admin:lint: > next lint "--max-warnings=0" "--format" "json"
@ash/admin:lint: 
@ash-ai/ui:lint: 
@ash-ai/ui:lint: > @ash-ai/ui@0.0.0 lint C:\Users\Khell\Desktop\Ashley AI\packages\ui
@ash-ai/ui:lint: > eslint src --ext .ts,.tsx "--max-warnings=0" "--format" "json"
@ash-ai/ui:lint: 
@ash/types:build: 
@ash/types:build: > @ash/types@1.0.0 build C:\Users\Khell\Desktop\Ashley AI\packages\types
@ash/types:build: > tsc
@ash/types:build: 
@ash/events:lint: cache miss, executing b5fc0deace1d4e83
@ash/shared:lint: cache miss, executing 108cd3ffa9db40f5
@ash/events:lint: 
@ash/events:lint: > @ash/events@1.0.0 lint C:\Users\Khell\Desktop\Ashley AI\packages\events
@ash/events:lint: > echo 'Events package has no source files to lint' "--max-warnings=0" "--format" "json"
@ash/events:lint: 
@ash/shared:lint: 
@ash/shared:lint: > @ash/shared@1.0.0 lint C:\Users\Khell\Desktop\Ashley AI\packages\shared
@ash/shared:lint: > eslint src --ext .ts "--max-warnings=0" "--format" "json"
@ash/shared:lint: 
@ash/events:lint: 'Events package has no source files to lint' "--max-warnings=0" "--format" "json"
@ash/types:lint: [{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\types\\src\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[606,609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[606,609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[761,764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[761,764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Basic types for ASH AI system\n\nexport interface User {\n  id: string;\n  workspace_id: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  role: string;\n  is_active: boolean;\n}\n\nexport interface Workspace {\n  id: string;\n  name: string;\n  slug: string;\n  is_active: boolean;\n}\n\nexport interface Client {\n  id: string;\n  workspace_id: string;\n  name: string;\n  email?: string;\n  is_active: boolean;\n}\n\nexport interface Order {\n  id: string;\n  workspace_id: string;\n  client_id: string;\n  order_number: string;\n  status: string;\n  total_amount: number;\n}\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: any;\n}\n\nexport interface AuthToken {\n  access_token: string;\n  refresh_token?: string;\n  expires_in?: number;\n  token_type?: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  user: User;\n  workspace: Workspace;\n}\n\n// Common types\nexport type Role =\n  | \"Admin\"\n  | \"Manager\"\n  | \"CSR\"\n  | \"Worker\"\n  | \"Client\"\n  | \"supervisor\"\n  | \"operator\"\n  | \"employee\";\nexport type OrderStatus =\n  | \"draft\"\n  | \"pending\"\n  | \"confirmed\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"cancelled\";\nexport type Permission = string;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\types\\src\\shared\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\types\\src\\shared\\common.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1930,1933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1930,1933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Common types used throughout the application\n\nexport type ID = string; // UUID format\nexport type WorkspaceID = string;\nexport type BrandID = string;\nexport type UserID = string;\n\n// Timestamps\nexport interface Timestamps {\n  created_at: Date;\n  updated_at: Date;\n}\n\n// Soft delete\nexport interface SoftDelete {\n  deleted_at: Date | null;\n}\n\n// Base entity with all common fields\nexport interface BaseEntity extends Timestamps, SoftDelete {\n  id: ID;\n  workspace_id: WorkspaceID;\n}\n\n// Status types\nexport type OrderStatus =\n  | \"draft\"\n  | \"confirmed\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"cancelled\";\nexport type ProductionStatus =\n  | \"pending\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"on_hold\"\n  | \"cancelled\";\nexport type PaymentStatus = \"pending\" | \"paid\" | \"failed\" | \"refunded\";\nexport type ShipmentStatus =\n  | \"preparing\"\n  | \"in_transit\"\n  | \"delivered\"\n  | \"returned\";\n\n// Printing methods\nexport type PrintingMethod =\n  | \"silkscreen\"\n  | \"sublimation\"\n  | \"dtf\"\n  | \"embroidery\";\n\n// Philippine-specific types\nexport type PhilippineRegion =\n  | \"NCR\"\n  | \"CAR\"\n  | \"Region I\"\n  | \"Region II\"\n  | \"Region III\"\n  | \"Region IV-A\"\n  | \"Region IV-B\"\n  | \"Region V\"\n  | \"Region VI\"\n  | \"Region VII\"\n  | \"Region VIII\"\n  | \"Region IX\"\n  | \"Region X\"\n  | \"Region XI\"\n  | \"Region XII\"\n  | \"Region XIII\"\n  | \"BARMM\";\n\n// Currency\nexport type Currency = \"PHP\" | \"USD\" | \"EUR\";\n\n// File types\nexport interface FileUpload {\n  id: ID;\n  filename: string;\n  original_name: string;\n  mime_type: string;\n  size: number;\n  url: string;\n  workspace_id: WorkspaceID;\n  created_at: Date;\n}\n\n// Pagination\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  sort?: string;\n  order?: \"asc\" | \"desc\";\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\n// JSONB flexible data\nexport type JSONBData = Record<string, any>;\n\n// QR/Barcode\nexport interface QRCodeData {\n  type: \"bundle\" | \"asset\" | \"order\" | \"carton\";\n  id: ID;\n  workspace_id: WorkspaceID;\n  metadata?: JSONBData;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
@ash/types:lint: ESLint found too many warnings (maximum: 0).
@ash/types:lint:  ELIFECYCLE  Command failed with exit code 1.
@ash/types:lint: command finished with error, but continuing...
@ash/admin:lint: ✔ No ESLint warnings or errors
@ash/shared:lint: [{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\shared\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\shared\\src\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
@ash-ai/ui:lint: [{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\forms\\client-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\forms\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\forms\\order-intake-form.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'watchedQuantity'. Either include it or remove the dependency array.","line":231,"column":8,"nodeType":"ArrayExpression","endLine":231,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [watchedSizeCurve, form, watchedQuantity]","fix":{"range":[6532,6556],"text":"[watchedSizeCurve, form, watchedQuantity]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\manufacturing\\ashley-alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\manufacturing\\size-curve-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\manufacturing\\status-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\production\\capacity-overview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\production\\gantt-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\production\\mrp-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\components\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\packages\\ui\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
@ash-ai/database:db:generate: Environment variables loaded from .env
@ash-ai/database:db:generate: Prisma schema loaded from prisma\schema.prisma
@ash-ai/database:db:generate: 
@ash-ai/database:db:generate: ✔ Generated Prisma Client (v5.22.0) to .\..\..\node_modules\.pnpm\@prisma+client@5.22.0_prisma@5.22.0\node_modules\@prisma\client in 1.56s
@ash-ai/database:db:generate: 
@ash-ai/database:db:generate: Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)
@ash-ai/database:db:generate: 
@ash-ai/database:db:generate: Tip: Curious about the SQL queries Prisma ORM generates? Optimize helps you enhance your visibility: https://pris.ly/tip-2-optimize
@ash-ai/database:db:generate: 
@ash-ai/database:build: cache miss, executing 8acdcff90a5e5e49
@ash-ai/database:build: 
@ash-ai/database:build: > @ash-ai/database@0.0.0 build C:\Users\Khell\Desktop\Ashley AI\packages\database
@ash-ai/database:build: > tsc
@ash-ai/database:build: 
@ash/portal:lint: cache miss, executing a597b0a71714d19a
@ash-ai/ai:build: cache miss, executing 96b545cee38829db
@ash/portal:lint: 
@ash/portal:lint: > @ash/portal@1.0.0 lint C:\Users\Khell\Desktop\Ashley AI\services\ash-portal
@ash/portal:lint: > next lint "--max-warnings=0" "--format" "json"
@ash/portal:lint: 
@ash-ai/ai:build: 
@ash-ai/ai:build: > @ash-ai/ai@0.1.0 build C:\Users\Khell\Desktop\Ashley AI\packages\ai
@ash-ai/ai:build: > tsup
@ash-ai/ai:build: 
@ash-ai/ai:build: [34mCLI[39m Building entry: src/index.ts, src/types.ts, src/validation.ts
@ash-ai/ai:build: [34mCLI[39m Using tsconfig: ..\..\tsconfig.json
@ash-ai/ai:build: [34mCLI[39m tsup v8.5.0
@ash-ai/ai:build: [34mCLI[39m Using tsup config: C:\Users\Khell\Desktop\Ashley AI\packages\ai\tsup.config.ts
@ash-ai/ai:build: [34mCLI[39m Target: es2020
@ash-ai/ai:build: [34mCLI[39m Cleaning output folder
@ash-ai/ai:build: [34mCJS[39m Build start
@ash-ai/ai:build: [34mESM[39m Build start
@ash-ai/ai:build: [33mCJS[39m [33mYou have emitDecoratorMetadata enabled but @swc/core was not installed, skipping swc plugin[39m
@ash-ai/ai:build: [33mESM[39m [33mYou have emitDecoratorMetadata enabled but @swc/core was not installed, skipping swc plugin[39m
@ash-ai/ai:build: [32mCJS[39m [1mdist\index.js          [22m[32m21.77 KB[39m
@ash-ai/ai:build: [32mCJS[39m [1mdist\types.js          [22m[32m777.00 B[39m
@ash-ai/ai:build: [32mCJS[39m [1mdist\validation.js     [22m[32m5.56 KB[39m
@ash-ai/ai:build: [32mCJS[39m [1mdist\index.js.map      [22m[32m36.70 KB[39m
@ash-ai/ai:build: [32mCJS[39m [1mdist\types.js.map      [22m[32m1.72 KB[39m
@ash-ai/ai:build: [32mCJS[39m [1mdist\validation.js.map [22m[32m6.27 KB[39m
@ash-ai/ai:build: [32mCJS[39m ⚡️ Build success in 41ms
@ash-ai/ai:build: [32mESM[39m [1mdist\types.mjs          [22m[32m34.00 B[39m
@ash-ai/ai:build: [32mESM[39m [1mdist\index.mjs          [22m[32m18.44 KB[39m
@ash-ai/ai:build: [32mESM[39m [1mdist\validation.mjs     [22m[32m3.20 KB[39m
@ash-ai/ai:build: [32mESM[39m [1mdist\types.mjs.map      [22m[32m71.00 B[39m
@ash-ai/ai:build: [32mESM[39m [1mdist\index.mjs.map      [22m[32m36.54 KB[39m
@ash-ai/ai:build: [32mESM[39m [1mdist\validation.mjs.map [22m[32m6.19 KB[39m
@ash-ai/ai:build: [32mESM[39m ⚡️ Build success in 41ms
@ash-ai/ai:build: [34mDTS[39m Build start
@ash/portal:lint: [{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\api\\portal\\approval\\[token]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[717,720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[717,720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[754,792],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@ash-ai/database\";\n\nconst prisma = db;\n\n// Simple token validation (replace with proper tokenService if needed)\nasync function validateApprovalToken(token: string) {\n  try {\n    // For now, extract approval ID from token (simplified)\n    // In production, use JWT or encrypted tokens\n    const decoded = Buffer.from(token, \"base64\").toString(\"utf-8\");\n    const [approvalId, clientId] = decoded.split(\":\");\n    return {\n      valid: true,\n      payload: { approvalId, clientId, designId: \"\", version: 1 },\n    };\n  } catch {\n    return { valid: false, error: \"Invalid token\", expired: false };\n  }\n}\n\nasync function logSecurityEvent(event: any) {\n  // Log to console for now\n  console.log(\"Security event:\", event);\n}\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { token: string } }\n) {\n  try {\n    // Get client IP and user agent for security logging\n    const clientIp =\n      request.headers.get(\"x-forwarded-for\") ||\n      request.headers.get(\"x-real-ip\") ||\n      \"unknown\";\n    const userAgent = request.headers.get(\"user-agent\") || \"unknown\";\n\n    // Validate the secure token\n    const tokenValidation = await validateApprovalToken(params.token);\n\n    if (!tokenValidation.valid) {\n      // Log security event\n      await logSecurityEvent({\n        type: \"invalid_access\",\n        ipAddress: clientIp,\n        userAgent: userAgent,\n        details: {\n          error: tokenValidation.error,\n          expired: tokenValidation.expired,\n        },\n      });\n\n      return NextResponse.json(\n        {\n          success: false,\n          message: tokenValidation.expired\n            ? \"Link has expired\"\n            : \"Invalid or expired approval link\",\n          expired: tokenValidation.expired,\n        },\n        { status: tokenValidation.expired ? 410 : 404 }\n      );\n    }\n\n    const { payload } = tokenValidation;\n\n    // Find approval using validated data\n    const approval = await prisma.designApproval.findFirst({\n      where: {\n        id: payload!.approvalId,\n        client_id: payload!.clientId,\n      },\n      include: {\n        design_asset: {\n          include: {\n            order: {\n              include: {\n                client: true,\n              },\n            },\n            brand: true,\n          },\n        },\n        client: true,\n      },\n    });\n\n    if (!approval) {\n      return NextResponse.json(\n        { success: false, message: \"Invalid or expired approval link\" },\n        { status: 404 }\n      );\n    }\n\n    // Get the specific design version using validated data\n    const designVersion = await prisma.designVersion.findFirst({\n      where: {\n        asset_id: payload!.designId,\n        version: payload!.version,\n      },\n    });\n\n    if (!designVersion) {\n      return NextResponse.json(\n        { success: false, message: \"Design version not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Log successful token validation\n    await logSecurityEvent({\n      type: \"token_validated\",\n      approvalId: payload!.approvalId,\n      clientId: payload!.clientId,\n      ipAddress: clientIp,\n      userAgent: userAgent,\n    });\n\n    // Check if expired (but still allow viewing)\n    const isExpired = approval.expires_at && new Date() > approval.expires_at;\n\n    // Calculate time remaining\n    let timeRemaining = \"\";\n    if (approval.expires_at && !isExpired) {\n      const now = new Date();\n      const expiry = approval.expires_at;\n      const diffInHours = Math.ceil(\n        (expiry.getTime() - now.getTime()) / (1000 * 60 * 60)\n      );\n\n      if (diffInHours > 24) {\n        const days = Math.ceil(diffInHours / 24);\n        timeRemaining = `${days} day${days > 1 ? \"s\" : \"\"}`;\n      } else if (diffInHours > 1) {\n        timeRemaining = `${diffInHours} hours`;\n      } else if (diffInHours === 1) {\n        timeRemaining = \"1 hour\";\n      } else {\n        timeRemaining = \"Less than 1 hour\";\n      }\n    }\n\n    const responseData = {\n      id: approval.id,\n      status: isExpired ? \"EXPIRED\" : approval.status,\n      version: approval.version,\n      comments: approval.comments,\n      expires_at: approval.expires_at,\n      created_at: approval.created_at,\n      time_remaining: timeRemaining,\n      design_asset: {\n        id: approval.design_asset.id,\n        name: approval.design_asset.name,\n        method: approval.design_asset.method,\n        order: {\n          order_number: approval.design_asset.order.order_number,\n          client: {\n            name: approval.design_asset.order.client.name,\n          },\n        },\n        brand: {\n          name: approval.design_asset.brand.name,\n          code: approval.design_asset.brand.code,\n        },\n      },\n      design_version: designVersion,\n      client: {\n        name: approval.client.name,\n        email: approval.client.email,\n      },\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: responseData,\n    });\n  } catch (error) {\n    console.error(\"Error fetching approval data:\", error);\n    return NextResponse.json(\n      { success: false, message: \"Internal server error\" },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\api\\portal\\approval\\[token]\\submit\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6265,6332],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@ash-ai/database\";\n\nconst prisma = db;\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { token: string } }\n) {\n  try {\n    // Parse form data for file uploads\n    const formData = await request.formData();\n    const decision = formData.get(\"decision\") as string;\n    const feedback = formData.get(\"feedback\") as string;\n    const approverName = formData.get(\"approver_name\") as string;\n\n    // Validate input\n    if (!decision || !feedback.trim() || !approverName.trim()) {\n      return NextResponse.json(\n        { success: false, message: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    if (![\"approved\", \"changes_requested\"].includes(decision)) {\n      return NextResponse.json(\n        { success: false, message: \"Invalid decision\" },\n        { status: 400 }\n      );\n    }\n\n    // Find approval by token\n    const approval = await prisma.designApproval.findFirst({\n      where: {\n        portal_token: params.token,\n        status: \"SENT\", // Only allow updates to sent approvals\n      },\n      include: {\n        design_asset: {\n          include: {\n            order: {\n              include: {\n                client: true,\n              },\n            },\n            brand: true,\n          },\n        },\n        client: true,\n      },\n    });\n\n    if (!approval) {\n      return NextResponse.json(\n        {\n          success: false,\n          message: \"Invalid approval link or already processed\",\n        },\n        { status: 404 }\n      );\n    }\n\n    // Check if expired\n    if (approval.expires_at && new Date() > approval.expires_at) {\n      return NextResponse.json(\n        { success: false, message: \"This approval request has expired\" },\n        { status: 400 }\n      );\n    }\n\n    // Handle file attachments\n    const attachmentUrls: string[] = [];\n    for (const [key, value] of formData.entries()) {\n      if (key.startsWith(\"attachment_\") && value instanceof File) {\n        // TODO: Implement file upload to cloud storage (AWS S3, etc.)\n        // For now, we'll just store the filename\n        attachmentUrls.push(`/uploads/${Date.now()}-${value.name}`);\n      }\n    }\n\n    // Update approval status\n    const updatedApproval = await prisma.designApproval.update({\n      where: { id: approval.id },\n      data: {\n        status: decision === \"approved\" ? \"APPROVED\" : \"CHANGES_REQUESTED\",\n        comments: feedback,\n        approver_name: approverName,\n        approver_signed_at: new Date(),\n      },\n    });\n\n    // Create design comment for the feedback\n    await prisma.designComment.create({\n      data: {\n        workspace_id: approval.workspace_id,\n        design_asset_id: approval.asset_id,\n        version_id: `${approval.asset_id}-${approval.version}`, // Composite key\n        comment_text: feedback,\n        comment_type: decision === \"approved\" ? \"APPROVAL\" : \"REVISION_REQUEST\",\n        priority: (formData.get(\"priority\") as string) || \"NORMAL\",\n        status: \"OPEN\",\n        attachments:\n          attachmentUrls.length > 0 ? JSON.stringify(attachmentUrls) : null,\n        created_by: \"CLIENT\", // Special identifier for client comments\n      },\n    });\n\n    // Update design asset status if approved\n    if (decision === \"approved\") {\n      await prisma.designAsset.update({\n        where: { id: approval.asset_id },\n        data: { status: \"APPROVED\" },\n      });\n    }\n\n    // Create audit log\n    await prisma.auditLog.create({\n      data: {\n        workspace_id: approval.workspace_id,\n        user_id: \"client\",\n        action:\n          decision === \"approved\" ? \"DESIGN_APPROVED\" : \"CHANGES_REQUESTED\",\n        resource: \"design_approval\",\n        resource_id: approval.id,\n        new_values: JSON.stringify({\n          status: updatedApproval.status,\n          approver_name: approverName,\n          feedback: feedback,\n          attachments: attachmentUrls,\n        }),\n      },\n    });\n\n    // Prepare notification email data for internal team\n    const notificationData = {\n      to: \"team@ashleyai.com\", // TODO: Get from workspace settings\n      subject: `Design ${decision === \"approved\" ? \"Approved\" : \"Feedback Received\"} - ${approval.design_asset.name}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>${decision === \"approved\" ? \"Design Approved! 🎉\" : \"Design Feedback Received\"}</h2>\n          \n          <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Design Details:</h3>\n            <ul>\n              <li><strong>Design:</strong> ${approval.design_asset.name}</li>\n              <li><strong>Order:</strong> ${approval.design_asset.order.order_number}</li>\n              <li><strong>Client:</strong> ${approval.client.name}</li>\n              <li><strong>Version:</strong> ${approval.version}</li>\n              <li><strong>Decision:</strong> ${decision === \"approved\" ? \"APPROVED ✅\" : \"CHANGES REQUESTED ⚠️\"}</li>\n            </ul>\n          </div>\n          \n          <div style=\"background: ${decision === \"approved\" ? \"#d1fae5\" : \"#fef3c7\"}; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Client Feedback:</h3>\n            <div style=\"white-space: pre-line; margin: 10px 0;\">\n              ${feedback}\n            </div>\n            <p><strong>Submitted by:</strong> ${approverName}</p>\n          </div>\n          \n          ${\n            attachmentUrls.length > 0\n              ? `\n            <div style=\"margin: 20px 0;\">\n              <h3>Attachments:</h3>\n              <ul>\n                ${attachmentUrls.map(url => `<li>${url}</li>`).join(\"\")}\n              </ul>\n            </div>\n          `\n              : \"\"\n          }\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${process.env.ADMIN_URL || \"http://localhost:3001\"}/designs/${approval.asset_id}\" \n               style=\"display: inline-block; padding: 12px 24px; background: #2563eb; color: white; text-decoration: none; border-radius: 6px; font-weight: bold;\">\n              View Design Details\n            </a>\n          </div>\n        </div>\n      `,\n    };\n\n    // TODO: Send notification email\n    console.log(\"Notification email would be sent:\", notificationData);\n\n    return NextResponse.json({\n      success: true,\n      message:\n        decision === \"approved\"\n          ? \"Design approved successfully!\"\n          : \"Feedback submitted successfully!\",\n      data: {\n        status: updatedApproval.status,\n        approver_name: approverName,\n        submitted_at: updatedApproval.approver_signed_at,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error submitting approval decision:\", error);\n    return NextResponse.json(\n      { success: false, message: \"Internal server error\" },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\api\\portal\\auth\\magic-link\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1768,1824],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@ash-ai/database\";\nimport crypto from \"crypto\";\n\nconst prisma = db;\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email } = await request.json();\n\n    if (!email) {\n      return NextResponse.json({ error: \"Email is required\" }, { status: 400 });\n    }\n\n    // Find client by email across all workspaces\n    const client = await prisma.client.findFirst({\n      where: {\n        email: email.toLowerCase(),\n        is_active: true,\n      },\n      include: {\n        workspace: true,\n      },\n    });\n\n    if (!client) {\n      // For security, don't reveal if email exists or not\n      return NextResponse.json({\n        success: true,\n        message:\n          \"If your email is registered, you will receive a magic link shortly.\",\n      });\n    }\n\n    // Generate magic token\n    const magicToken = crypto.randomBytes(32).toString(\"hex\");\n    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n    // Create or update client session\n    await prisma.clientSession.upsert({\n      where: {\n        workspace_id_magic_token: {\n          workspace_id: client.workspace_id,\n          magic_token: magicToken,\n        },\n      },\n      create: {\n        workspace_id: client.workspace_id,\n        client_id: client.id,\n        email: email.toLowerCase(),\n        magic_token: magicToken,\n        expires_at: expiresAt,\n      },\n      update: {\n        is_used: false,\n        expires_at: expiresAt,\n      },\n    });\n\n    // TODO: Send actual email with magic link\n    // For now, we'll return the magic link in development\n    const magicLink = `${process.env.NEXT_PUBLIC_PORTAL_URL || \"http://localhost:3003\"}/auth/verify?token=${magicToken}`;\n\n    console.log(\"🔗 Magic Link for\", email, \":\", magicLink);\n\n    // Log client activity\n    await prisma.clientActivity.create({\n      data: {\n        workspace_id: client.workspace_id,\n        client_id: client.id,\n        activity_type: \"MAGIC_LINK_REQUESTED\",\n        description: `Magic link requested for ${email}`,\n        ip_address:\n          request.headers.get(\"x-forwarded-for\") ||\n          request.headers.get(\"x-real-ip\") ||\n          \"unknown\",\n        user_agent: request.headers.get(\"user-agent\") || \"unknown\",\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"Magic link sent to your email!\",\n      // Remove this in production\n      ...(process.env.NODE_ENV === \"development\" && { magicLink }),\n    });\n  } catch (error) {\n    console.error(\"Magic link error:\", error);\n    return NextResponse.json(\n      {\n        error: \"Failed to send magic link\",\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\api\\portal\\notifications\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":28,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1068,1071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1068,1071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@ash-ai/database\";\nimport { verify } from \"jsonwebtoken\";\n\nconst prisma = db;\n\ninterface JWTPayload {\n  clientId: string;\n  workspaceId: string;\n  email: string;\n  name: string;\n}\n\nasync function getClientFromToken(\n  request: NextRequest\n): Promise<JWTPayload | null> {\n  try {\n    const token = request.cookies.get(\"portal-token\")?.value;\n\n    if (!token) {\n      return null;\n    }\n\n    const jwtSecret = process.env.JWT_SECRET || \"fallback-secret-key\";\n    const payload = verify(token, jwtSecret) as JWTPayload;\n\n    return payload;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const client = await getClientFromToken(request);\n\n    if (!client) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const unreadOnly = searchParams.get(\"unread\") === \"true\";\n    const limit = parseInt(searchParams.get(\"limit\") || \"20\");\n\n    const where: any = {\n      workspace_id: client.workspaceId,\n      client_id: client.clientId,\n    };\n\n    if (unreadOnly) {\n      where.is_read = false;\n    }\n\n    // Get notifications\n    const notifications = await prisma.clientNotification.findMany({\n      where,\n      orderBy: { created_at: \"desc\" },\n      take: limit,\n    });\n\n    // Get unread count\n    const unreadCount = await prisma.clientNotification.count({\n      where: {\n        workspace_id: client.workspaceId,\n        client_id: client.clientId,\n        is_read: false,\n      },\n    });\n\n    return NextResponse.json({\n      notifications,\n      unreadCount,\n    });\n  } catch (error) {\n    console.error(\"Notifications fetch error:\", error);\n    return NextResponse.json(\n      {\n        error: \"Failed to fetch notifications\",\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PATCH(request: NextRequest) {\n  try {\n    const client = await getClientFromToken(request);\n\n    if (!client) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { notificationIds, markAsRead } = await request.json();\n\n    if (!Array.isArray(notificationIds)) {\n      return NextResponse.json(\n        { error: \"Invalid notification IDs\" },\n        { status: 400 }\n      );\n    }\n\n    // Update notifications\n    await prisma.clientNotification.updateMany({\n      where: {\n        id: { in: notificationIds },\n        workspace_id: client.workspaceId,\n        client_id: client.clientId,\n      },\n      data: {\n        is_read: markAsRead,\n        ...(markAsRead && { read_at: new Date() }),\n      },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Notification update error:\", error);\n    return NextResponse.json(\n      {\n        error: \"Failed to update notifications\",\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\api\\portal\\orders\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":28,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@ash-ai/database\";\nimport { verify } from \"jsonwebtoken\";\n\nconst prisma = db;\n\ninterface JWTPayload {\n  clientId: string;\n  workspaceId: string;\n  email: string;\n  name: string;\n}\n\nasync function getClientFromToken(\n  request: NextRequest\n): Promise<JWTPayload | null> {\n  try {\n    const token = request.cookies.get(\"portal-token\")?.value;\n\n    if (!token) {\n      return null;\n    }\n\n    const jwtSecret = process.env.JWT_SECRET || \"fallback-secret-key\";\n    const payload = verify(token, jwtSecret) as JWTPayload;\n\n    return payload;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const client = await getClientFromToken(request);\n\n    if (!client) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const limit = parseInt(searchParams.get(\"limit\") || \"10\");\n    const status = searchParams.get(\"status\");\n    const skip = (page - 1) * limit;\n\n    // Build where condition\n    const where: any = {\n      workspace_id: client.workspaceId,\n      client_id: client.clientId,\n    };\n\n    if (status) {\n      where.status = status;\n    }\n\n    // Get orders with related data (simplified to avoid schema mismatches)\n    const [orders, total] = await Promise.all([\n      prisma.order.findMany({\n        where,\n        include: {\n          brand: true,\n          line_items: true,\n          design_assets: true,\n          bundles: true,\n          invoices: {\n            where: { status: { not: \"draft\" } },\n            include: {\n              payments: true,\n            },\n          },\n        },\n        orderBy: { created_at: \"desc\" },\n        skip,\n        take: limit,\n      }),\n      prisma.order.count({ where }),\n    ]);\n\n    // Log activity\n    await prisma.clientActivity.create({\n      data: {\n        workspace_id: client.workspaceId,\n        client_id: client.clientId,\n        activity_type: \"VIEW_ORDERS\",\n        description: `Viewed orders list (page ${page})`,\n        ip_address: request.headers.get(\"x-forwarded-for\") || \"unknown\",\n        user_agent: request.headers.get(\"user-agent\") || \"unknown\",\n      },\n    });\n\n    // Transform orders to include progress tracking\n    const transformedOrders = orders.map(order => {\n      // Calculate production progress based on order status\n      const totalSteps = 7; // Design → Cutting → Printing → Sewing → QC → Finishing → Delivery\n      let completedSteps = 0;\n      let currentStage = \"Order Placed\";\n\n      // Simple progress calculation based on order status\n      const statusMap: Record<string, { steps: number; stage: string }> = {\n        PENDING: { steps: 0, stage: \"Order Placed\" },\n        DESIGN: { steps: 1, stage: \"Design Phase\" },\n        PRODUCTION: { steps: 3, stage: \"In Production\" },\n        QC: { steps: 5, stage: \"Quality Control\" },\n        PACKING: { steps: 6, stage: \"Packing\" },\n        SHIPPED: { steps: 7, stage: \"Shipped\" },\n        DELIVERED: { steps: 7, stage: \"Delivered\" },\n        COMPLETED: { steps: 7, stage: \"Completed\" },\n      };\n\n      const statusInfo = statusMap[order.status] || statusMap[\"PENDING\"];\n      completedSteps = statusInfo.steps;\n      currentStage = statusInfo.stage;\n\n      const progressPercentage = Math.round(\n        (completedSteps / totalSteps) * 100\n      );\n\n      // Calculate payment status\n      const totalInvoiced = order.invoices.reduce(\n        (sum, inv) => sum + inv.total_amount,\n        0\n      );\n      const totalPaid = order.invoices.reduce(\n        (sum, inv) =>\n          sum + inv.payments.reduce((paySum, pay) => paySum + pay.amount, 0),\n        0\n      );\n      const paymentStatus =\n        totalPaid >= totalInvoiced\n          ? \"paid\"\n          : totalPaid > 0\n            ? \"partial\"\n            : \"pending\";\n\n      return {\n        id: order.id,\n        order_number: order.order_number,\n        status: order.status,\n        total_amount: order.total_amount,\n        currency: order.currency,\n        delivery_date: order.delivery_date,\n        created_at: order.created_at,\n        updated_at: order.updated_at,\n        brand: order.brand,\n        line_items: order.line_items,\n        progress: {\n          percentage: progressPercentage,\n          current_stage: currentStage,\n          completed_steps: completedSteps,\n          total_steps: totalSteps,\n        },\n        payment: {\n          status: paymentStatus,\n          total_invoiced: totalInvoiced,\n          total_paid: totalPaid,\n          outstanding: totalInvoiced - totalPaid,\n        },\n        latest_tracking: null, // Simplified - tracking not included in this query\n        needs_approval: false, // Simplified - approval checking not included\n      };\n    });\n\n    return NextResponse.json({\n      orders: transformedOrders,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit),\n      },\n    });\n  } catch (error) {\n    console.error(\"Orders fetch error:\", error);\n    return NextResponse.json(\n      {\n        error: \"Failed to fetch orders\",\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\approval\\[token]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RotateCw' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedVariant' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":88,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedVariant' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":88,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":45},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchApprovalData'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [fetchApprovalData, params.token]","fix":{"range":[2173,2188],"text":"[fetchApprovalData, params.token]"}}]},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":359,"column":21,"nodeType":"JSXOpeningElement","endLine":359,"endColumn":50},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":392,"column":21,"nodeType":"JSXOpeningElement","endLine":401,"endColumn":23},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":423,"column":21,"nodeType":"JSXOpeningElement","endLine":423,"endColumn":79},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14287,14290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14287,14290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@ash-ai/ui/card\";\nimport { Button } from \"@ash-ai/ui/button\";\nimport { Badge } from \"@ash-ai/ui/badge\";\nimport { Separator } from \"@ash-ai/ui/separator\";\nimport { Textarea } from \"@ash-ai/ui/textarea\";\nimport { Input } from \"@ash-ai/ui/input\";\nimport { Label } from \"@ash-ai/ui/label\";\nimport {\n  CheckCircle,\n  XCircle,\n  MessageCircle,\n  Eye,\n  Download,\n  Image,\n  FileText,\n  Palette,\n  Clock,\n  AlertCircle,\n  Send,\n  ZoomIn,\n  ZoomOut,\n  RotateCw,\n  Paperclip,\n  Star,\n  ThumbsUp,\n  ThumbsDown,\n} from \"lucide-react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { toast } from \"react-hot-toast\";\n\ninterface ApprovalData {\n  id: string;\n  status: string;\n  version: number;\n  comments: string;\n  expires_at: string;\n  created_at: string;\n  design_asset: {\n    id: string;\n    name: string;\n    method: string;\n    order: {\n      order_number: string;\n      client: {\n        name: string;\n      };\n    };\n    brand: {\n      name: string;\n      code: string;\n    };\n  };\n  design_version: {\n    id: string;\n    version: number;\n    files: string;\n    placements: string;\n    palette: string;\n    meta: string;\n  };\n  client: {\n    name: string;\n    email: string;\n  };\n}\n\nexport default function ClientApprovalPage() {\n  const params = useParams();\n  const router = useRouter();\n  const [approvalData, setApprovalData] = useState<ApprovalData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [decision, setDecision] = useState<\n    \"approved\" | \"changes_requested\" | \"\"\n  >(\"\");\n  const [feedback, setFeedback] = useState(\"\");\n  const [approverName, setApproverName] = useState(\"\");\n  const [mockupZoom, setMockupZoom] = useState(100);\n  const [selectedVariant, setSelectedVariant] = useState(0);\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const [imageError, setImageError] = useState(false);\n\n  useEffect(() => {\n    if (params?.token) {\n      fetchApprovalData(params.token as string);\n    }\n  }, [params?.token]);\n\n  const fetchApprovalData = async (token: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/portal/approval/${token}`);\n      const data = await response.json();\n\n      if (data.success) {\n        setApprovalData(data.data);\n\n        // Pre-fill client name if available\n        if (data.data.client.name) {\n          setApproverName(data.data.client.name);\n        }\n      } else {\n        toast.error(data.message || \"Failed to load approval request\");\n        router.push(\"/error\");\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch approval data:\", error);\n      toast.error(\"Failed to load approval request\");\n      router.push(\"/error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmitDecision = async () => {\n    if (!approvalData || !decision) {\n      toast.error(\"Please select approve or request changes\");\n      return;\n    }\n\n    if (decision === \"changes_requested\" && !feedback.trim()) {\n      toast.error(\"Please provide feedback for requested changes\");\n      return;\n    }\n\n    if (!approverName.trim()) {\n      toast.error(\"Please provide your name\");\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n\n      // Create form data for file upload if there are attachments\n      const formData = new FormData();\n      formData.append(\"decision\", decision);\n      formData.append(\"feedback\", feedback);\n      formData.append(\"approver_name\", approverName);\n\n      attachments.forEach((file, index) => {\n        formData.append(`attachment_${index}`, file);\n      });\n\n      const response = await fetch(\n        `/api/portal/approval/${params?.token}/submit`,\n        {\n          method: \"POST\",\n          body: formData,\n        }\n      );\n\n      const result = await response.json();\n\n      if (response.ok) {\n        toast.success(\n          decision === \"approved\"\n            ? \"Design approved successfully!\"\n            : \"Feedback submitted successfully!\"\n        );\n\n        // Refresh the page to show updated status\n        if (params?.token) {\n          await fetchApprovalData(params.token as string);\n        }\n      } else {\n        toast.error(result.message || \"Failed to submit decision\");\n      }\n    } catch (error) {\n      console.error(\"Failed to submit decision:\", error);\n      toast.error(\"Failed to submit decision\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      const newFiles = Array.from(files);\n      setAttachments(prev => [...prev, ...newFiles]);\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const getStatusColor = (status: string) => {\n    if (!status) return \"bg-gray-100 text-gray-800\";\n\n    switch (status.toUpperCase()) {\n      case \"SENT\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"APPROVED\":\n        return \"bg-green-100 text-green-800\";\n      case \"CHANGES_REQUESTED\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"EXPIRED\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getMethodColor = (method: string) => {\n    if (!method) return \"bg-gray-100 text-gray-800\";\n\n    switch (method.toUpperCase()) {\n      case \"SILKSCREEN\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"SUBLIMATION\":\n        return \"bg-cyan-100 text-cyan-800\";\n      case \"DTF\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"EMBROIDERY\":\n        return \"bg-pink-100 text-pink-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n          <p className=\"text-gray-600\">Loading approval request...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!approvalData) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"py-12 text-center\">\n            <AlertCircle className=\"mx-auto mb-4 h-12 w-12 text-red-500\" />\n            <h2 className=\"mb-2 text-xl font-semibold\">Approval Not Found</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              This approval link is invalid or has expired.\n            </p>\n            <Button onClick={() => window.close()}>Close</Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const files = JSON.parse(approvalData.design_version.files);\n  const placements = JSON.parse(approvalData.design_version.placements);\n  const palette = approvalData.design_version.palette\n    ? JSON.parse(approvalData.design_version.palette)\n    : [];\n  const isExpired = new Date(approvalData.expires_at) < new Date();\n  const isCompleted = approvalData.status !== \"SENT\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"border-b bg-white shadow-sm\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Design Approval\n              </h1>\n              <p className=\"mt-1 text-gray-600\">\n                {approvalData.design_asset.name} •{\" \"}\n                {approvalData.design_asset.order.order_number}\n              </p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge className={getStatusColor(approvalData.status)}>\n                {approvalData.status?.replace(\"_\", \" \") || \"Unknown\"}\n              </Badge>\n              <Badge\n                className={getMethodColor(approvalData.design_asset.method)}\n              >\n                {approvalData.design_asset.method}\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Expiry Warning */}\n        {isExpired && (\n          <Card className=\"mb-6 border-red-200 bg-red-50\">\n            <CardContent className=\"py-4\">\n              <div className=\"flex items-center gap-3\">\n                <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                <div>\n                  <p className=\"font-medium text-red-800\">\n                    This approval request has expired\n                  </p>\n                  <p className=\"text-sm text-red-600\">\n                    Expired on{\" \"}\n                    {new Date(approvalData.expires_at).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Completion Status */}\n        {isCompleted && (\n          <Card className=\"mb-6 border-green-200 bg-green-50\">\n            <CardContent className=\"py-4\">\n              <div className=\"flex items-center gap-3\">\n                {approvalData.status === \"APPROVED\" ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                ) : (\n                  <MessageCircle className=\"h-5 w-5 text-yellow-600\" />\n                )}\n                <div>\n                  <p className=\"font-medium text-green-800\">\n                    {approvalData.status === \"APPROVED\"\n                      ? \"Thank you! This design has been approved.\"\n                      : \"Thank you for your feedback! Changes have been requested.\"}\n                  </p>\n                  <p className=\"text-sm text-green-600\">\n                    Submitted on{\" \"}\n                    {new Date(approvalData.created_at).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          {/* Main Content */}\n          <div className=\"space-y-6 lg:col-span-2\">\n            {/* Design Preview */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Image className=\"h-5 w-5\" />\n                    Design Mockup\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() =>\n                        setMockupZoom(Math.max(50, mockupZoom - 25))\n                      }\n                      disabled={mockupZoom <= 50}\n                    >\n                      <ZoomOut className=\"h-4 w-4\" />\n                    </Button>\n                    <span className=\"px-2 font-mono text-sm\">\n                      {mockupZoom}%\n                    </span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() =>\n                        setMockupZoom(Math.min(200, mockupZoom + 25))\n                      }\n                      disabled={mockupZoom >= 200}\n                    >\n                      <ZoomIn className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {files.mockup_url && !imageError ? (\n                  <div className=\"text-center\">\n                    <img\n                      src={files.mockup_url}\n                      alt=\"Design mockup\"\n                      className=\"mx-auto h-auto max-w-full rounded-lg shadow-lg transition-transform duration-200\"\n                      style={{\n                        transform: `scale(${mockupZoom / 100})`,\n                        transformOrigin: \"center top\",\n                      }}\n                      onError={() => setImageError(true)}\n                    />\n                    <div className=\"mt-4 flex justify-center gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" asChild>\n                        <a\n                          href={files.mockup_url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <Eye className=\"mr-1 h-4 w-4\" />\n                          View Full Size\n                        </a>\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" asChild>\n                        <a href={files.mockup_url} download>\n                          <Download className=\"mr-1 h-4 w-4\" />\n                          Download\n                        </a>\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"py-12 text-center\">\n                    <Image className=\"mx-auto mb-4 h-12 w-12 text-gray-400\" />\n                    <p className=\"text-gray-500\">\n                      Design preview not available\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Design Details */}\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              {/* Placements */}\n              {placements.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Design Placements</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {placements.map((placement: any, index: number) => (\n                        <div key={index} className=\"rounded-lg bg-gray-50 p-3\">\n                          <div className=\"mb-2 flex items-center justify-between\">\n                            <h4 className=\"font-medium capitalize\">\n                              {placement.area?.replace(\"_\", \" \") ||\n                                \"Unknown Area\"}\n                            </h4>\n                            <span className=\"text-sm text-gray-600\">\n                              {placement.width_cm} × {placement.height_cm} cm\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-600\">\n                            Position: X {placement.offset_x}cm, Y{\" \"}\n                            {placement.offset_y}cm\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Color Palette */}\n              {palette.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Palette className=\"h-5 w-5\" />\n                      Colors Used\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {palette.map((color: string, index: number) => (\n                        <div key={index} className=\"flex items-center gap-2\">\n                          <div\n                            className=\"h-8 w-8 flex-shrink-0 rounded border border-gray-300\"\n                            style={{ backgroundColor: color }}\n                          />\n                          <span className=\"font-mono text-sm\">{color}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Decision Form */}\n            {!isCompleted && !isExpired && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-xl\">Your Decision</CardTitle>\n                  <CardDescription>\n                    Please review the design carefully and provide your approval\n                    or feedback.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Approver Name */}\n                  <div>\n                    <Label htmlFor=\"approver_name\">Your Name *</Label>\n                    <Input\n                      id=\"approver_name\"\n                      value={approverName}\n                      onChange={e => setApproverName(e.target.value)}\n                      placeholder=\"Enter your full name\"\n                    />\n                  </div>\n\n                  {/* Decision Buttons */}\n                  <div className=\"space-y-3\">\n                    <Label>Your Decision *</Label>\n                    <div className=\"flex gap-3\">\n                      <Button\n                        size=\"lg\"\n                        variant={\n                          decision === \"approved\" ? \"default\" : \"outline\"\n                        }\n                        className={`flex-1 ${decision === \"approved\" ? \"bg-green-600 hover:bg-green-700\" : \"\"}`}\n                        onClick={() => setDecision(\"approved\")}\n                      >\n                        <ThumbsUp className=\"mr-2 h-5 w-5\" />\n                        Approve Design\n                      </Button>\n                      <Button\n                        size=\"lg\"\n                        variant={\n                          decision === \"changes_requested\"\n                            ? \"default\"\n                            : \"outline\"\n                        }\n                        className={`flex-1 ${decision === \"changes_requested\" ? \"bg-yellow-600 hover:bg-yellow-700\" : \"\"}`}\n                        onClick={() => setDecision(\"changes_requested\")}\n                      >\n                        <ThumbsDown className=\"mr-2 h-5 w-5\" />\n                        Request Changes\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Feedback */}\n                  <div>\n                    <Label htmlFor=\"feedback\">\n                      {decision === \"changes_requested\"\n                        ? \"What changes would you like? *\"\n                        : \"Additional Comments (Optional)\"}\n                    </Label>\n                    <Textarea\n                      id=\"feedback\"\n                      value={feedback}\n                      onChange={e => setFeedback(e.target.value)}\n                      placeholder={\n                        decision === \"changes_requested\"\n                          ? \"Please be specific about what changes you'd like to see...\"\n                          : \"Any additional comments or notes...\"\n                      }\n                      rows={4}\n                      className={\n                        decision === \"changes_requested\"\n                          ? \"border-yellow-300\"\n                          : \"\"\n                      }\n                    />\n                  </div>\n\n                  {/* File Attachments */}\n                  <div>\n                    <Label>Attachments (Optional)</Label>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <input\n                          type=\"file\"\n                          multiple\n                          accept=\"image/*,.pdf,.doc,.docx\"\n                          onChange={handleFileChange}\n                          className=\"hidden\"\n                          id=\"file-upload\"\n                        />\n                        <Button variant=\"outline\" asChild>\n                          <label\n                            htmlFor=\"file-upload\"\n                            className=\"cursor-pointer\"\n                          >\n                            <Paperclip className=\"mr-2 h-4 w-4\" />\n                            Add Files\n                          </label>\n                        </Button>\n                      </div>\n\n                      {attachments.length > 0 && (\n                        <div className=\"space-y-2\">\n                          {attachments.map((file, index) => (\n                            <div\n                              key={index}\n                              className=\"flex items-center justify-between rounded bg-gray-50 p-2\"\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <FileText className=\"h-4 w-4 text-gray-500\" />\n                                <span className=\"text-sm\">{file.name}</span>\n                                <span className=\"text-xs text-gray-500\">\n                                  ({formatFileSize(file.size)})\n                                </span>\n                              </div>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => removeAttachment(index)}\n                              >\n                                <XCircle className=\"h-4 w-4 text-red-500\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Submit Button */}\n                  <Button\n                    size=\"lg\"\n                    onClick={handleSubmitDecision}\n                    disabled={\n                      submitting ||\n                      !decision ||\n                      !approverName.trim() ||\n                      (decision === \"changes_requested\" && !feedback.trim())\n                    }\n                    className=\"w-full\"\n                  >\n                    <Send className=\"mr-2 h-5 w-5\" />\n                    {submitting\n                      ? \"Submitting...\"\n                      : decision === \"approved\"\n                        ? \"Submit Approval\"\n                        : \"Submit Feedback\"}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Order Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div>\n                  <strong>Order Number:</strong>\n                  <br />\n                  {approvalData.design_asset.order.order_number}\n                </div>\n                <Separator />\n                <div>\n                  <strong>Client:</strong>\n                  <br />\n                  {approvalData.design_asset.order.client.name}\n                </div>\n                <Separator />\n                <div>\n                  <strong>Brand:</strong>\n                  <br />\n                  {approvalData.design_asset.brand.name}\n                </div>\n                <Separator />\n                <div>\n                  <strong>Print Method:</strong>\n                  <br />\n                  <Badge\n                    className={getMethodColor(approvalData.design_asset.method)}\n                    variant=\"outline\"\n                  >\n                    {approvalData.design_asset.method}\n                  </Badge>\n                </div>\n                <Separator />\n                <div>\n                  <strong>Design Version:</strong>\n                  <br />v{approvalData.version}\n                </div>\n                <Separator />\n                <div>\n                  <strong>Approval Sent:</strong>\n                  <br />\n                  {new Date(approvalData.created_at).toLocaleDateString()}\n                </div>\n                {approvalData.expires_at && (\n                  <>\n                    <div>\n                      <strong>Expires:</strong>\n                      <br />\n                      <span\n                        className={isExpired ? \"text-red-600\" : \"text-gray-900\"}\n                      >\n                        {new Date(approvalData.expires_at).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Help & Support */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Need Help?</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm\">\n                <p className=\"mb-3\">\n                  If you have questions about this design or need clarification,\n                  please contact us:\n                </p>\n                <div className=\"space-y-2\">\n                  <p>\n                    <strong>Email:</strong> support@ashleyai.com\n                  </p>\n                  <p>\n                    <strong>Phone:</strong> +63 123 456 7890\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quality Assurance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5 text-yellow-500\" />\n                  Quality Promise\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm\">\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-green-500\" />\n                    <span>AI-validated print quality</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-green-500\" />\n                    <span>Color accuracy guaranteed</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-green-500\" />\n                    <span>Professional production standards</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\app\\dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":451,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16293,16391],"text":"\n                    You&apos;ll receive updates about your orders and account here.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16293,16391],"text":"\n                    You&lsquo;ll receive updates about your orders and account here.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16293,16391],"text":"\n                    You&#39;ll receive updates about your orders and account here.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16293,16391],"text":"\n                    You&rsquo;ll receive updates about your orders and account here.\n                  "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  ShirtIcon,\n  Package,\n  Eye,\n  CreditCard,\n  Bell,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  TrendingUp,\n  Calendar,\n  MessageCircle,\n} from \"lucide-react\";\nimport toast from \"react-hot-toast\";\nimport { ClientOnly } from \"@/components/client-only\";\n\ninterface Order {\n  id: string;\n  order_number: string;\n  status: string;\n  total_amount: number;\n  currency: string;\n  delivery_date: string | null;\n  created_at: string;\n  brand: { name: string } | null;\n  progress: {\n    percentage: number;\n    current_stage: string;\n    completed_steps: number;\n    total_steps: number;\n  };\n  payment: {\n    status: string;\n    total_invoiced: number;\n    total_paid: number;\n    outstanding: number;\n  };\n  needs_approval: boolean;\n}\n\ninterface Notification {\n  id: string;\n  type: string;\n  title: string;\n  message: string;\n  priority: string;\n  created_at: string;\n  is_read: boolean;\n  action_url?: string;\n}\n\nexport default function DashboardPage() {\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  const fetchDashboardData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Fetch recent orders\n      const ordersResponse = await fetch(\"/api/portal/orders?limit=5\");\n      if (ordersResponse.ok) {\n        const ordersData = await ordersResponse.json();\n        setOrders(ordersData.orders);\n      }\n\n      // Fetch notifications\n      const notificationsResponse = await fetch(\n        \"/api/portal/notifications?limit=5\"\n      );\n      if (notificationsResponse.ok) {\n        const notificationsData = await notificationsResponse.json();\n        setNotifications(notificationsData.notifications);\n        setUnreadCount(notificationsData.unreadCount);\n      }\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      toast.error(\"Failed to load dashboard data\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    if (!status) return \"bg-gray-500\";\n\n    const colors: Record<string, string> = {\n      draft: \"bg-gray-500\",\n      confirmed: \"bg-blue-500\",\n      in_production: \"bg-yellow-500\",\n      quality_check: \"bg-purple-500\",\n      ready_to_ship: \"bg-orange-500\",\n      shipped: \"bg-green-500\",\n      delivered: \"bg-emerald-500\",\n      cancelled: \"bg-red-500\",\n    };\n    return colors[status.toLowerCase()] || \"bg-gray-500\";\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    if (!status) return \"text-gray-600 bg-gray-50\";\n\n    const colors: Record<string, string> = {\n      paid: \"text-green-600 bg-green-50\",\n      partial: \"text-orange-600 bg-orange-50\",\n      pending: \"text-red-600 bg-red-50\",\n    };\n    return colors[status.toLowerCase()] || \"text-gray-600 bg-gray-50\";\n  };\n\n  const getPriorityColor = (priority: string) => {\n    if (!priority) return \"text-gray-600\";\n\n    const colors: Record<string, string> = {\n      LOW: \"text-gray-600\",\n      MEDIUM: \"text-blue-600\",\n      HIGH: \"text-orange-600\",\n      URGENT: \"text-red-600\",\n    };\n    return colors[priority.toUpperCase()] || \"text-gray-600\";\n  };\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: currency,\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n          <p className=\"text-gray-600\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"border-b bg-white shadow-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <ShirtIcon className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  ASH AI Portal\n                </h1>\n                <p className=\"text-sm text-gray-600\">Manufacturing Dashboard</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Button variant=\"outline\" size=\"sm\" className=\"relative\">\n                  <Bell className=\"h-4 w-4\" />\n                  <ClientOnly>\n                    {unreadCount > 0 && (\n                      <span className=\"absolute -right-2 -top-2 flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-xs text-white\">\n                        {unreadCount}\n                      </span>\n                    )}\n                  </ClientOnly>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Quick Stats */}\n        <div className=\"mb-8 grid grid-cols-1 gap-6 md:grid-cols-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Orders</p>\n                  <p className=\"text-2xl font-bold\">{orders.length}</p>\n                </div>\n                <Package className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">In Production</p>\n                  <p className=\"text-2xl font-bold\">\n                    {orders.filter(o => o.status === \"in_production\").length}\n                  </p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Needs Approval</p>\n                  <p className=\"text-2xl font-bold\">\n                    {orders.filter(o => o.needs_approval).length}\n                  </p>\n                </div>\n                <AlertCircle className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Outstanding Payment</p>\n                  <p className=\"text-2xl font-bold\">\n                    {formatCurrency(\n                      orders.reduce((sum, o) => sum + o.payment.outstanding, 0),\n                      orders[0]?.currency || \"PHP\"\n                    )}\n                  </p>\n                </div>\n                <CreditCard className=\"h-8 w-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"orders\">Recent Orders</TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"relative\">\n              Notifications\n              <ClientOnly>\n                {unreadCount > 0 && (\n                  <span className=\"ml-2 rounded-full bg-red-500 px-2 py-0.5 text-xs text-white\">\n                    {unreadCount}\n                  </span>\n                )}\n              </ClientOnly>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              {orders.map(order => (\n                <Card key={order.id}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          Order #{order.order_number}\n                        </CardTitle>\n                        <CardDescription>\n                          {order.brand?.name && `${order.brand.name} • `}\n                          Created{\" \"}\n                          {new Date(order.created_at).toLocaleDateString()}\n                          {order.delivery_date && (\n                            <>\n                              {\" \"}\n                              • Due{\" \"}\n                              {new Date(\n                                order.delivery_date\n                              ).toLocaleDateString()}\n                            </>\n                          )}\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {order.needs_approval && (\n                          <Badge\n                            variant=\"outline\"\n                            className=\"border-orange-200 bg-orange-50 text-orange-600\"\n                          >\n                            <AlertCircle className=\"mr-1 h-3 w-3\" />\n                            Needs Approval\n                          </Badge>\n                        )}\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status?.replace(\"_\", \" \") || \"Unknown\"}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {/* Progress */}\n                      <div>\n                        <div className=\"mb-2 flex items-center justify-between\">\n                          <span className=\"text-sm font-medium text-gray-700\">\n                            {order.progress.current_stage}\n                          </span>\n                          <span className=\"text-sm text-gray-500\">\n                            {order.progress.completed_steps}/\n                            {order.progress.total_steps} steps\n                          </span>\n                        </div>\n                        <Progress\n                          value={order.progress.percentage}\n                          className=\"h-2\"\n                        />\n                      </div>\n\n                      {/* Order Details */}\n                      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Order Value</p>\n                          <p className=\"font-semibold\">\n                            {formatCurrency(order.total_amount, order.currency)}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-gray-600\">\n                            Payment Status\n                          </p>\n                          <Badge\n                            variant=\"outline\"\n                            className={getPaymentStatusColor(\n                              order.payment.status\n                            )}\n                          >\n                            {order.payment.status}\n                          </Badge>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Outstanding</p>\n                          <p className=\"font-semibold\">\n                            {formatCurrency(\n                              order.payment.outstanding,\n                              order.currency\n                            )}\n                          </p>\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View Details\n                        </Button>\n                        {order.needs_approval && (\n                          <Button variant=\"default\" size=\"sm\">\n                            <CheckCircle className=\"mr-2 h-4 w-4\" />\n                            Review Design\n                          </Button>\n                        )}\n                        {order.payment.outstanding > 0 && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <CreditCard className=\"mr-2 h-4 w-4\" />\n                            Pay Now\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n\n              {orders.length === 0 && (\n                <Card>\n                  <CardContent className=\"p-12 text-center\">\n                    <Package className=\"mx-auto mb-4 h-12 w-12 text-gray-400\" />\n                    <h3 className=\"mb-2 text-lg font-semibold text-gray-900\">\n                      No orders yet\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      Your recent orders will appear here once you start placing\n                      orders.\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\n            {notifications.map(notification => (\n              <Card\n                key={notification.id}\n                className={!notification.is_read ? \"bg-blue-50\" : \"\"}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"mb-2 flex items-center space-x-2\">\n                        <h4 className=\"font-semibold text-gray-900\">\n                          {notification.title}\n                        </h4>\n                        {!notification.is_read && (\n                          <div className=\"h-2 w-2 rounded-full bg-blue-600\"></div>\n                        )}\n                        <Badge\n                          variant=\"outline\"\n                          className={getPriorityColor(notification.priority)}\n                        >\n                          {notification.priority}\n                        </Badge>\n                      </div>\n                      <p className=\"mb-2 text-gray-600\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(notification.created_at).toLocaleString()}\n                      </p>\n                    </div>\n                    {notification.action_url && (\n                      <Button variant=\"outline\" size=\"sm\">\n                        View\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n\n            {notifications.length === 0 && (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <Bell className=\"mx-auto mb-4 h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mb-2 text-lg font-semibold text-gray-900\">\n                    No notifications\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    You'll receive updates about your orders and account here.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\components\\design-review\\DesignViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Maximize' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Move' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fullscreen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFullscreen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":35},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":247,"column":17,"nodeType":"JSXOpeningElement","endLine":257,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@ash-ai/ui/card\";\nimport { Button } from \"@ash-ai/ui/button\";\nimport { Badge } from \"@ash-ai/ui/badge\";\nimport {\n  ZoomIn,\n  ZoomOut,\n  RotateCw,\n  Download,\n  Maximize,\n  Eye,\n  Grid,\n  Move,\n  Image as ImageIcon,\n} from \"lucide-react\";\n\ninterface DesignFile {\n  mockup_url?: string;\n  prod_url?: string;\n  separations?: string[];\n  dst_url?: string;\n}\n\ninterface DesignViewerProps {\n  files: DesignFile;\n  designName: string;\n  version: number;\n  className?: string;\n}\n\nexport function DesignViewer({\n  files,\n  designName,\n  version,\n  className = \"\",\n}: DesignViewerProps) {\n  const [zoom, setZoom] = useState(100);\n  const [rotation, setRotation] = useState(0);\n  const [selectedView, setSelectedView] = useState<\n    \"mockup\" | \"production\" | \"separations\"\n  >(\"mockup\");\n  const [separationIndex, setSeparationIndex] = useState(0);\n  const [fullscreen, setFullscreen] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [imageLoading, setImageLoading] = useState(true);\n\n  const getCurrentImageUrl = () => {\n    switch (selectedView) {\n      case \"mockup\":\n        return files.mockup_url;\n      case \"production\":\n        return files.prod_url;\n      case \"separations\":\n        return files.separations?.[separationIndex];\n      default:\n        return files.mockup_url;\n    }\n  };\n\n  const handleZoomIn = () => {\n    setZoom(prev => Math.min(200, prev + 25));\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prev => Math.max(25, prev - 25));\n  };\n\n  const handleRotate = () => {\n    setRotation(prev => (prev + 90) % 360);\n  };\n\n  const handleReset = () => {\n    setZoom(100);\n    setRotation(0);\n  };\n\n  const handleImageLoad = () => {\n    setImageLoading(false);\n    setImageError(false);\n  };\n\n  const handleImageError = () => {\n    setImageLoading(false);\n    setImageError(true);\n  };\n\n  const currentImageUrl = getCurrentImageUrl();\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <ImageIcon className=\"h-5 w-5\" />\n            Design Viewer\n            <Badge variant=\"outline\">v{version}</Badge>\n          </CardTitle>\n\n          {/* View Controls */}\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex rounded-lg border p-1\">\n              {files.mockup_url && (\n                <Button\n                  size=\"sm\"\n                  variant={selectedView === \"mockup\" ? \"default\" : \"ghost\"}\n                  onClick={() => setSelectedView(\"mockup\")}\n                  className=\"h-8 px-3\"\n                >\n                  Mockup\n                </Button>\n              )}\n              {files.prod_url && (\n                <Button\n                  size=\"sm\"\n                  variant={selectedView === \"production\" ? \"default\" : \"ghost\"}\n                  onClick={() => setSelectedView(\"production\")}\n                  className=\"h-8 px-3\"\n                >\n                  Production\n                </Button>\n              )}\n              {files.separations && files.separations.length > 0 && (\n                <Button\n                  size=\"sm\"\n                  variant={selectedView === \"separations\" ? \"default\" : \"ghost\"}\n                  onClick={() => setSelectedView(\"separations\")}\n                  className=\"h-8 px-3\"\n                >\n                  Separations\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Separations Navigation */}\n        {selectedView === \"separations\" &&\n          files.separations &&\n          files.separations.length > 1 && (\n            <div className=\"flex items-center justify-between rounded-lg bg-gray-50 p-3\">\n              <span className=\"text-sm font-medium\">\n                Separation {separationIndex + 1} of {files.separations.length}\n              </span>\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() =>\n                    setSeparationIndex(prev => Math.max(0, prev - 1))\n                  }\n                  disabled={separationIndex === 0}\n                >\n                  Previous\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() =>\n                    setSeparationIndex(prev =>\n                      Math.min(files.separations!.length - 1, prev + 1)\n                    )\n                  }\n                  disabled={separationIndex === files.separations.length - 1}\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n\n        {/* Image Controls */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleZoomOut}\n              disabled={zoom <= 25}\n            >\n              <ZoomOut className=\"h-4 w-4\" />\n            </Button>\n\n            <span className=\"min-w-[60px] text-center font-mono text-sm\">\n              {zoom}%\n            </span>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleZoomIn}\n              disabled={zoom >= 200}\n            >\n              <ZoomIn className=\"h-4 w-4\" />\n            </Button>\n\n            <Button size=\"sm\" variant=\"outline\" onClick={handleRotate}>\n              <RotateCw className=\"h-4 w-4\" />\n            </Button>\n\n            <Button size=\"sm\" variant=\"outline\" onClick={handleReset}>\n              Reset\n            </Button>\n          </div>\n\n          <div className=\"flex gap-2\">\n            {currentImageUrl && (\n              <>\n                <Button size=\"sm\" variant=\"outline\" asChild>\n                  <a\n                    href={currentImageUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <Eye className=\"mr-1 h-4 w-4\" />\n                    View Full\n                  </a>\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" asChild>\n                  <a\n                    href={currentImageUrl}\n                    download={`${designName}-v${version}-${selectedView}`}\n                  >\n                    <Download className=\"mr-1 h-4 w-4\" />\n                    Download\n                  </a>\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Image Display */}\n        <div className=\"relative flex min-h-[400px] items-center justify-center overflow-hidden rounded-lg border-2 border-dashed border-gray-200 bg-gray-50\">\n          {currentImageUrl ? (\n            <div className=\"relative flex h-full w-full items-center justify-center p-4\">\n              {imageLoading && (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"h-8 w-8 animate-spin rounded-full border-b-2 border-blue-600\"></div>\n                </div>\n              )}\n\n              {!imageError ? (\n                <img\n                  src={currentImageUrl}\n                  alt={`${designName} - ${selectedView}`}\n                  className=\"max-h-full max-w-full object-contain transition-transform duration-200 ease-in-out\"\n                  style={{\n                    transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,\n                    transformOrigin: \"center center\",\n                  }}\n                  onLoad={handleImageLoad}\n                  onError={handleImageError}\n                />\n              ) : (\n                <div className=\"py-12 text-center\">\n                  <ImageIcon className=\"mx-auto mb-4 h-12 w-12 text-gray-400\" />\n                  <p className=\"mb-2 text-gray-500\">Failed to load image</p>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setImageError(false);\n                      setImageLoading(true);\n                    }}\n                  >\n                    Retry\n                  </Button>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"py-12 text-center\">\n              <ImageIcon className=\"mx-auto mb-4 h-12 w-12 text-gray-400\" />\n              <p className=\"text-gray-500\">\n                No image available for {selectedView}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* File Information */}\n        <div className=\"text-muted-foreground space-y-1 text-sm\">\n          <div className=\"flex justify-between\">\n            <span>Current View:</span>\n            <span className=\"font-medium capitalize\">{selectedView}</span>\n          </div>\n          {selectedView === \"separations\" && files.separations && (\n            <div className=\"flex justify-between\">\n              <span>Total Separations:</span>\n              <span className=\"font-medium\">{files.separations.length}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"flex flex-wrap gap-2 border-t pt-2\">\n          {files.mockup_url && (\n            <Button size=\"sm\" variant=\"outline\" asChild>\n              <a\n                href={files.mockup_url}\n                download={`${designName}-v${version}-mockup`}\n              >\n                <Download className=\"mr-1 h-3 w-3\" />\n                Mockup\n              </a>\n            </Button>\n          )}\n          {files.prod_url && (\n            <Button size=\"sm\" variant=\"outline\" asChild>\n              <a\n                href={files.prod_url}\n                download={`${designName}-v${version}-production`}\n              >\n                <Download className=\"mr-1 h-3 w-3\" />\n                Production File\n              </a>\n            </Button>\n          )}\n          {files.dst_url && (\n            <Button size=\"sm\" variant=\"outline\" asChild>\n              <a\n                href={files.dst_url}\n                download={`${designName}-v${version}-embroidery`}\n              >\n                <Download className=\"mr-1 h-3 w-3\" />\n                Embroidery File\n              </a>\n            </Button>\n          )}\n          {files.separations && files.separations.length > 0 && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                files.separations?.forEach((url, index) => {\n                  const a = document.createElement(\"a\");\n                  a.href = url;\n                  a.download = `${designName}-v${version}-separation-${index + 1}`;\n                  a.click();\n                });\n              }}\n            >\n              <Download className=\"mr-1 h-3 w-3\" />\n              All Separations\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\components\\design-review\\FeedbackForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThumbsUp' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThumbsDown' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'designName' is defined but never used. Allowed unused args must match /^_/u.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9138,9141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9138,9141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@ash-ai/ui/card\";\nimport { Button } from \"@ash-ai/ui/button\";\nimport { Textarea } from \"@ash-ai/ui/textarea\";\nimport { Input } from \"@ash-ai/ui/input\";\nimport { Label } from \"@ash-ai/ui/label\";\nimport { Badge } from \"@ash-ai/ui/badge\";\nimport {\n  MessageCircle,\n  Paperclip,\n  X,\n  FileText,\n  Image as ImageIcon,\n  Send,\n  Star,\n  ThumbsUp,\n  ThumbsDown,\n  AlertTriangle,\n} from \"lucide-react\";\n\ninterface FeedbackFormProps {\n  designName: string;\n  version: number;\n  onSubmit: (data: FeedbackData) => void;\n  submitting?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface FeedbackData {\n  rating?: number;\n  feedback: string;\n  change_requests?: string[];\n  attachments: File[];\n  priority: \"low\" | \"normal\" | \"high\" | \"urgent\";\n}\n\nconst PRIORITY_OPTIONS = [\n  {\n    value: \"low\",\n    label: \"Low Priority\",\n    color: \"bg-gray-100 text-gray-800\",\n    icon: \"🔵\",\n  },\n  {\n    value: \"normal\",\n    label: \"Normal\",\n    color: \"bg-blue-100 text-blue-800\",\n    icon: \"🟡\",\n  },\n  {\n    value: \"high\",\n    label: \"High Priority\",\n    color: \"bg-orange-100 text-orange-800\",\n    icon: \"🟠\",\n  },\n  {\n    value: \"urgent\",\n    label: \"Urgent\",\n    color: \"bg-red-100 text-red-800\",\n    icon: \"🔴\",\n  },\n];\n\nconst QUICK_FEEDBACK_OPTIONS = [\n  \"The colors look great!\",\n  \"Perfect size and placement\",\n  \"Love the overall design\",\n  \"Please make the text larger\",\n  \"Can we change the color scheme?\",\n  \"The logo needs to be bigger\",\n  \"Move the design to the center\",\n  \"Use a different font style\",\n  \"Add more contrast\",\n  \"Remove the background element\",\n];\n\nexport function FeedbackForm({\n  designName,\n  version,\n  onSubmit,\n  submitting = false,\n  disabled = false,\n  className = \"\",\n}: FeedbackFormProps) {\n  const [rating, setRating] = useState<number | undefined>();\n  const [feedback, setFeedback] = useState(\"\");\n  const [changeRequests, setChangeRequests] = useState<string[]>([]);\n  const [newChangeRequest, setNewChangeRequest] = useState(\"\");\n  const [attachments, setAttachments] = useState<File[]>([]);\n  const [priority, setPriority] = useState<\n    \"low\" | \"normal\" | \"high\" | \"urgent\"\n  >(\"normal\");\n\n  const handleSubmit = () => {\n    if (!feedback.trim()) return;\n\n    const data: FeedbackData = {\n      rating,\n      feedback: feedback.trim(),\n      change_requests: changeRequests.filter(req => req.trim()),\n      attachments,\n      priority,\n    };\n\n    onSubmit(data);\n  };\n\n  const addChangeRequest = () => {\n    if (newChangeRequest.trim()) {\n      setChangeRequests(prev => [...prev, newChangeRequest.trim()]);\n      setNewChangeRequest(\"\");\n    }\n  };\n\n  const removeChangeRequest = (index: number) => {\n    setChangeRequests(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const addQuickFeedback = (text: string) => {\n    if (feedback.trim()) {\n      setFeedback(prev => prev + \"\\n\" + text);\n    } else {\n      setFeedback(text);\n    }\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      const newFiles = Array.from(files).filter(file => {\n        // Limit file size to 10MB\n        if (file.size > 10 * 1024 * 1024) {\n          alert(`File \"${file.name}\" is too large. Maximum size is 10MB.`);\n          return false;\n        }\n        return true;\n      });\n      setAttachments(prev => [...prev, ...newFiles]);\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const isSubmitDisabled = disabled || submitting || !feedback.trim();\n  const selectedPriority = PRIORITY_OPTIONS.find(p => p.value === priority);\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MessageCircle className=\"h-5 w-5\" />\n          Your Feedback\n          <Badge variant=\"outline\">v{version}</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Rating */}\n        <div>\n          <Label className=\"mb-3 block text-base font-medium\">\n            How do you feel about this design? (Optional)\n          </Label>\n          <div className=\"flex gap-2\">\n            {[1, 2, 3, 4, 5].map(star => (\n              <button\n                key={star}\n                type=\"button\"\n                onClick={() => setRating(rating === star ? undefined : star)}\n                className={`rounded p-2 transition-colors ${\n                  rating && rating >= star\n                    ? \"text-yellow-500 hover:text-yellow-600\"\n                    : \"text-gray-300 hover:text-yellow-400\"\n                }`}\n                disabled={disabled}\n              >\n                <Star\n                  className={`h-6 w-6 ${rating && rating >= star ? \"fill-current\" : \"\"}`}\n                />\n              </button>\n            ))}\n          </div>\n          {rating && (\n            <p className=\"text-muted-foreground mt-2 text-sm\">\n              {rating === 1 && \"We'll work on improvements\"}\n              {rating === 2 && \"Thanks for the feedback\"}\n              {rating === 3 && \"Good to know your thoughts\"}\n              {rating === 4 && \"Great! We're glad you like it\"}\n              {rating === 5 && \"Awesome! We're thrilled you love it\"}\n            </p>\n          )}\n        </div>\n\n        {/* Quick Feedback Options */}\n        <div>\n          <Label className=\"mb-2 block text-sm font-medium\">\n            Quick Feedback\n          </Label>\n          <div className=\"flex flex-wrap gap-2\">\n            {QUICK_FEEDBACK_OPTIONS.map((option, index) => (\n              <Button\n                key={index}\n                type=\"button\"\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => addQuickFeedback(option)}\n                disabled={disabled}\n                className=\"text-xs\"\n              >\n                {option}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Main Feedback */}\n        <div>\n          <Label htmlFor=\"feedback\" className=\"text-base font-medium\">\n            Your Comments *\n          </Label>\n          <Textarea\n            id=\"feedback\"\n            value={feedback}\n            onChange={e => setFeedback(e.target.value)}\n            placeholder=\"Please share your thoughts about this design. Be as specific as possible to help us understand what you'd like to see...\"\n            rows={6}\n            disabled={disabled}\n            className=\"mt-2\"\n          />\n          <p className=\"text-muted-foreground mt-1 text-xs\">\n            {feedback.length}/1000 characters\n          </p>\n        </div>\n\n        {/* Change Requests */}\n        <div>\n          <Label className=\"mb-2 block text-base font-medium\">\n            Specific Change Requests (Optional)\n          </Label>\n          <div className=\"space-y-3\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={newChangeRequest}\n                onChange={e => setNewChangeRequest(e.target.value)}\n                placeholder=\"e.g., Make the logo 20% bigger\"\n                disabled={disabled}\n                onKeyPress={e => e.key === \"Enter\" && addChangeRequest()}\n              />\n              <Button\n                type=\"button\"\n                onClick={addChangeRequest}\n                disabled={disabled || !newChangeRequest.trim()}\n                size=\"sm\"\n              >\n                Add\n              </Button>\n            </div>\n\n            {changeRequests.length > 0 && (\n              <div className=\"space-y-2\">\n                {changeRequests.map((request, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between rounded border border-yellow-200 bg-yellow-50 p-2\"\n                  >\n                    <span className=\"text-sm\">{request}</span>\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeChangeRequest(index)}\n                      disabled={disabled}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Priority */}\n        <div>\n          <Label className=\"mb-3 block text-base font-medium\">\n            Priority Level\n          </Label>\n          <div className=\"grid grid-cols-2 gap-2 md:grid-cols-4\">\n            {PRIORITY_OPTIONS.map(option => (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => setPriority(option.value as any)}\n                disabled={disabled}\n                className={`rounded-lg border p-3 text-center transition-colors ${\n                  priority === option.value\n                    ? \"border-blue-500 bg-blue-50\"\n                    : \"border-gray-200 hover:border-gray-300\"\n                } `}\n              >\n                <div className=\"mb-1 text-lg\">{option.icon}</div>\n                <div className=\"text-xs font-medium\">{option.label}</div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* File Attachments */}\n        <div>\n          <Label className=\"mb-2 block text-base font-medium\">\n            Attachments (Optional)\n          </Label>\n          <div className=\"space-y-3\">\n            <div>\n              <input\n                type=\"file\"\n                multiple\n                accept=\"image/*,.pdf,.doc,.docx,.txt\"\n                onChange={handleFileChange}\n                disabled={disabled}\n                className=\"hidden\"\n                id=\"file-upload\"\n              />\n              <Button variant=\"outline\" asChild disabled={disabled}>\n                <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                  <Paperclip className=\"mr-2 h-4 w-4\" />\n                  Add Files\n                </label>\n              </Button>\n              <p className=\"text-muted-foreground mt-1 text-xs\">\n                Max 10MB per file. Images, PDFs, and documents only.\n              </p>\n            </div>\n\n            {attachments.length > 0 && (\n              <div className=\"space-y-2\">\n                {attachments.map((file, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between rounded border bg-gray-50 p-2\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      {file.type.startsWith(\"image/\") ? (\n                        <ImageIcon className=\"h-4 w-4 text-blue-500\" />\n                      ) : (\n                        <FileText className=\"h-4 w-4 text-gray-500\" />\n                      )}\n                      <div>\n                        <div className=\"text-sm font-medium\">{file.name}</div>\n                        <div className=\"text-muted-foreground text-xs\">\n                          {formatFileSize(file.size)}\n                        </div>\n                      </div>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeAttachment(index)}\n                      disabled={disabled}\n                    >\n                      <X className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"border-t pt-4\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitDisabled}\n            size=\"lg\"\n            className=\"w-full\"\n          >\n            <Send className=\"mr-2 h-5 w-5\" />\n            {submitting ? \"Submitting Feedback...\" : \"Submit Feedback\"}\n          </Button>\n\n          {selectedPriority && priority !== \"normal\" && (\n            <div className={`mt-3 rounded-lg p-3 ${selectedPriority.color}`}>\n              <div className=\"flex items-center gap-2\">\n                {priority === \"urgent\" && <AlertTriangle className=\"h-4 w-4\" />}\n                <span className=\"text-sm font-medium\">\n                  {priority === \"high\" &&\n                    \"High priority feedback will be reviewed within 4 hours\"}\n                  {priority === \"urgent\" &&\n                    \"Urgent feedback will be reviewed immediately\"}\n                  {priority === \"low\" &&\n                    \"Low priority feedback will be reviewed within 24 hours\"}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\components\\ui\\input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[74,151],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Khell\\Desktop\\Ashley AI\\services\\ash-portal\\src\\pages\\api\\client\\order-tracking.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[186,189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[186,189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[250,253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[250,253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":38,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[311,314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[311,314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[688,691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[688,691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[843,846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[843,846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1693,1696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1693,1696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2313,2316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2313,2316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2448,2451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2448,2451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2513,2516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2513,2516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3651,3654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3651,3654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4628,4631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4628,4631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5314,5317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5314,5317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6273,6276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6273,6276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8080,8083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8080,8083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9440,9443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9440,9443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9649,9652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9649,9652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":299,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9784,9787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9784,9787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":301,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9849,9852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9849,9852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":315,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\";\nimport { db as prisma } from \"@ash-ai/database\";\n\n// Simple logger for portal\nconst logger = {\n  error: (msg: string, error: any) => console.error(msg, error),\n  info: (msg: string, data?: any) => console.log(msg, data),\n  warn: (msg: string, data?: any) => console.warn(msg, data),\n};\n\ninterface Order {\n  order_number: string;\n  client: { name: string };\n  brand?: string;\n  status: string;\n  total_amount: number;\n  delivery_date: string;\n  created_at: string;\n  line_items: LineItem[];\n}\n\ninterface LineItem {\n  description: string;\n  quantity: number;\n  garment_type: string;\n  printing_method: string;\n  size_breakdown?: any;\n}\n\ninterface TimelineItem {\n  stage: string;\n  status: string;\n  timestamp: string;\n  description: string;\n  icon: string;\n  details?: Record<string, any>;\n}\n\ninterface TrackingResponse {\n  success: boolean;\n  data?: {\n    order: Order;\n    timeline: TimelineItem[];\n    current_status: string;\n    progress_percentage: number;\n    estimated_completion: string;\n    real_time_updates: TimelineItem[];\n  };\n  error?: string;\n}\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<TrackingResponse>\n) {\n  if (req.method !== \"GET\") {\n    return res\n      .status(405)\n      .json({ success: false, error: \"Method not allowed\" });\n  }\n\n  try {\n    const { orderNumber, clientId } = req.query;\n\n    if (!orderNumber || !clientId) {\n      return res\n        .status(400)\n        .json({ success: false, error: \"Order number and client ID required\" });\n    }\n\n    // Get order with complete tracking information - cast to any to handle complex Prisma types\n    const order: any = await prisma.order.findFirst({\n      where: {\n        order_number: orderNumber as string,\n        client_id: clientId as string,\n      },\n      include: {\n        client: { select: { name: true } },\n        brand: { select: { name: true } },\n        line_items: true,\n        bundles: true,\n        design_assets: true,\n      },\n    });\n\n    if (!order) {\n      return res.status(404).json({ success: false, error: \"Order not found\" });\n    }\n\n    // Calculate overall progress - handle undefined bundles\n    const bundles = order.bundles || [];\n    const totalSteps = bundles.reduce(\n      (sum: number, bundle: any) => sum + (bundle.sewing_runs?.length || 0),\n      0\n    );\n    const completedSteps = bundles.reduce(\n      (sum: number, bundle: any) =>\n        sum +\n        (bundle.sewing_runs?.filter((step: any) => step.status === \"completed\")\n          ?.length || 0),\n      0\n    );\n    const progressPercentage =\n      totalSteps > 0 ? Math.round((completedSteps / totalSteps) * 100) : 0;\n\n    // Build timeline with real-time status\n    const timeline: TimelineItem[] = [];\n\n    // Order confirmation\n    timeline.push({\n      stage: \"Order Confirmed\",\n      status: \"completed\",\n      timestamp: new Date(order.created_at).toISOString(),\n      description: `Order ${order.order_number} confirmed for ${order.total_amount.toLocaleString()} pieces`,\n      icon: \"📋\",\n    });\n\n    // Design approval - handle undefined design_assets\n    const designAssets = order.design_assets || [];\n    if (designAssets.length > 0) {\n      timeline.push({\n        stage: \"Design Approved\",\n        status: \"completed\",\n        timestamp: new Date(\n          designAssets[0].approved_at || order.created_at\n        ).toISOString(),\n        description: `${designAssets.length} design(s) approved and ready for production`,\n        icon: \"🎨\",\n      });\n    }\n\n    // Production stages for each bundle - handle undefined bundles\n    bundles.forEach((bundle: any, bundleIndex: number) => {\n      const bundlePrefix =\n        bundles.length > 1 ? `Bundle ${bundleIndex + 1}: ` : \"\";\n\n      // Cutting stage - handle cut_outputs\n      const cutOutputs = bundle.cut_outputs || [];\n      if (cutOutputs.length > 0) {\n        const latestCut = cutOutputs[cutOutputs.length - 1];\n        timeline.push({\n          stage: `${bundlePrefix}Cutting`,\n          status: \"completed\", // Cut outputs only exist when cutting is done\n          timestamp: new Date(latestCut.created_at).toISOString(),\n          description: `${latestCut.pieces_cut} pieces cut successfully`,\n          icon: \"✂️\",\n          details: {\n            pieces_cut: latestCut.pieces_cut,\n            wastage: latestCut.wastage ? `${latestCut.wastage}%` : null,\n            notes: latestCut.notes,\n          },\n        });\n      }\n\n      // Printing stages - handle print_outputs\n      const printOutputs = bundle.print_outputs || [];\n      printOutputs.forEach((printOutput: any) => {\n        timeline.push({\n          stage: `${bundlePrefix}Printing`,\n          status: \"completed\", // Print outputs only exist when printing is done\n          timestamp: new Date(printOutput.created_at).toISOString(),\n          description: `${printOutput.pieces_printed || \"Unknown\"} pieces printed`,\n          icon: \"🖨️\",\n          details: {\n            pieces_printed: printOutput.pieces_printed,\n            quality_score: printOutput.quality_score,\n            notes: printOutput.notes,\n          },\n        });\n      });\n\n      // Sewing and finishing stages - handle sewing_runs\n      const sewingRuns = bundle.sewing_runs || [];\n      sewingRuns.forEach((sewingRun: any) => {\n        timeline.push({\n          stage: `${bundlePrefix}Sewing`,\n          status: sewingRun.status || \"completed\",\n          timestamp: new Date(\n            sewingRun.completed_at ||\n              sewingRun.started_at ||\n              sewingRun.created_at\n          ).toISOString(),\n          description:\n            sewingRun.status === \"completed\"\n              ? `Sewing completed - ${sewingRun.pieces_completed || 0} pieces finished`\n              : `Sewing in progress - ${sewingRun.pieces_completed || 0} pieces completed`,\n          icon: \"🪡\",\n          details: {\n            pieces_completed: sewingRun.pieces_completed,\n            efficiency: sewingRun.efficiency,\n            operator: sewingRun.assigned_operator,\n            machine: sewingRun.machine_id,\n          },\n        });\n      });\n\n      // Quality checks - handle qc_inspections\n      const qcInspections = bundle.qc_inspections || [];\n      qcInspections.forEach((qc: any) => {\n        timeline.push({\n          stage: `${bundlePrefix}Quality Check`,\n          status: qc.status === \"passed\" ? \"completed\" : \"failed\",\n          timestamp: new Date(qc.created_at).toISOString(),\n          description:\n            qc.status === \"passed\"\n              ? `Quality check passed - ${qc.inspection_type} inspection approved`\n              : `Quality issue detected in ${qc.inspection_type} inspection: ${qc.notes}`,\n          icon: qc.status === \"passed\" ? \"✅\" : \"❌\",\n          details: {\n            inspection_type: qc.inspection_type,\n            notes: qc.notes,\n            inspector: qc.inspector_id,\n            defects_found: qc.defects_found,\n          },\n        });\n      });\n    });\n\n    // Sort timeline by timestamp\n    timeline.sort(\n      (a, b) =>\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n\n    // Estimate completion date\n    const estimatedCompletion = calculateEstimatedCompletion(order);\n\n    // Get real-time updates (recent activity)\n    const recentUpdates = timeline\n      .filter(item => {\n        const hoursSinceUpdate =\n          (Date.now() - new Date(item.timestamp).getTime()) / (1000 * 60 * 60);\n        return hoursSinceUpdate <= 24; // Last 24 hours\n      })\n      .slice(-5); // Last 5 updates\n\n    const response = {\n      order: {\n        order_number: order.order_number || \"\",\n        client: order.client || { name: \"\" },\n        brand: order.brand?.name || \"\",\n        status: order.status || \"\",\n        total_amount: order.total_amount || 0,\n        delivery_date: order.delivery_date || new Date().toISOString(),\n        created_at: order.created_at\n          ? new Date(order.created_at).toISOString()\n          : new Date().toISOString(),\n        line_items: (order.line_items || []).map((item: any) => ({\n          description: item.description || \"\",\n          quantity: item.quantity || 0,\n          garment_type: item.garment_type || \"\",\n          printing_method: item.printing_method || \"\",\n          size_breakdown: item.size_breakdown\n            ? JSON.parse(item.size_breakdown)\n            : null,\n        })),\n      } as Order,\n      timeline,\n      current_status: getCurrentStatus(timeline),\n      progress_percentage: progressPercentage,\n      estimated_completion: estimatedCompletion,\n      real_time_updates: recentUpdates,\n    };\n\n    res.json({ success: true, data: response });\n  } catch (error) {\n    logger.error(\"Order tracking error:\", error);\n    res\n      .status(500)\n      .json({\n        success: false,\n        error: \"Failed to fetch order tracking information\",\n      });\n  }\n}\n\nfunction getCurrentStatus(timeline: TimelineItem[]): string {\n  const inProgress = timeline.find(item => item.status === \"in_progress\");\n  if (inProgress) return `Currently: ${inProgress.stage}`;\n\n  const completed = timeline.filter(item => item.status === \"completed\");\n  if (completed.length === timeline.length) return \"Order Completed\";\n\n  const lastCompleted = completed[completed.length - 1];\n  return lastCompleted\n    ? `Last completed: ${lastCompleted.stage}`\n    : \"Order Processing\";\n}\n\nfunction calculateEstimatedCompletion(order: any): string {\n  try {\n    // Simple estimation based on remaining steps and average completion time\n    const bundles = order.bundles || [];\n    const totalSteps = bundles.reduce(\n      (sum: number, bundle: any) => sum + (bundle.sewing_runs?.length || 0),\n      0\n    );\n    const completedSteps = bundles.reduce(\n      (sum: number, bundle: any) =>\n        sum +\n        (bundle.sewing_runs?.filter((step: any) => step.status === \"completed\")\n          ?.length || 0),\n      0\n    );\n    const remainingSteps = totalSteps - completedSteps;\n\n    if (remainingSteps === 0) return new Date().toISOString();\n\n    // Average 1 day per step (simplified)\n    const estimatedDays = remainingSteps * 1;\n    const completionDate = new Date(\n      Date.now() + estimatedDays * 24 * 60 * 60 * 1000\n    );\n    return completionDate.toISOString();\n  } catch (error) {\n    // Fallback to delivery date\n    return (\n      order.delivery_date ||\n      new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\n    );\n  }\n}\n","usedDeprecatedRules":[]}]
@ash/portal:lint: 
@ash/portal:lint: info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules
@ash/portal:lint:  ELIFECYCLE  Command failed with exit code 1.
@ash/portal:lint: command finished with error, but continuing...
@ash-ai/ai:build: [32mDTS[39m ⚡️ Build success in 8924ms
@ash-ai/ai:build: [32mDTS[39m [1mdist\index.d.ts       [22m[32m4.21 KB[39m
@ash-ai/ai:build: [32mDTS[39m [1mdist\types.d.ts       [22m[32m1.57 KB[39m
@ash-ai/ai:build: [32mDTS[39m [1mdist\validation.d.ts  [22m[32m13.41 KB[39m
@ash-ai/ai:build: [32mDTS[39m [1mdist\index.d.mts      [22m[32m4.22 KB[39m
@ash-ai/ai:build: [32mDTS[39m [1mdist\types.d.mts      [22m[32m1.57 KB[39m
@ash-ai/ai:build: [32mDTS[39m [1mdist\validation.d.mts [22m[32m13.41 KB[39m
@ash/types#lint: command (C:\Users\Khell\Desktop\Ashley AI\packages\types) C:\Users\Khell\AppData\Local\pnpm\.tools\pnpm\9.0.0\bin\pnpm.CMD run lint --max-warnings=0 --format json exited (1)
@ash/portal#lint: command (C:\Users\Khell\Desktop\Ashley AI\services\ash-portal) C:\Users\Khell\AppData\Local\pnpm\.tools\pnpm\9.0.0\bin\pnpm.CMD run lint --max-warnings=0 --format json exited (1)

 Tasks:    9 successful, 11 total
Cached:    0 cached, 11 total
  Time:    28.858s 
Failed:    @ash/portal#lint, @ash/types#lint

 ERROR  run failed: command  exited (1)
 ELIFECYCLE  Command failed with exit code 1.
