"use client"; import { Card, CardContent, CardHeader, CardTitle, CardDescription,
} from"@/components/ui/card";
import { _Button } from"@/components/ui/button";
import { _LineChart, Line, _AreaChart, Area, _XAxis, _YAxis, _CartesianGrid, _Tooltip, _Legend, _ResponsiveContainer, TooltipProps,
} from"recharts";
import { Download, TrendingUp, Calendar } from"lucide-react";
import { format, subDays } from"date-fns";
import { useState } from"react"; interface ProductionData { date: string; cutting: number; printing: number; sewing: number; finishing: number; target: number;
} interface ProductionTrendChartProps { data?: ProductionData[]; onExport?: () => void; showTarget?: boolean; timeRange?:"7d" |"30d" |"90d"; onTimeRangeChange?: (range:"7d" |"30d" |"90d") => void;
} const __CustomTooltip = ({ active, payload, label,
}: TooltipProps<number, string>) => { if (active && payload && payload.length) { return ( <div className="rounded-lg border border-gray-700 bg-gray-800 p-3 shadow-lg"> <p className="mb-2 font-medium text-white">{label}</p> {payload.map((entry, index) => ( <div key={index} className="flex items-center justify-between gap-4 text-sm" > <span style={{ color: entry.color }}>{entry.name}:</span> <span className="font-medium text-white">{entry.value} units</span> </div> ))} </div> ); } return null;
}; export default function ProductionTrendChart({ data, onExport, showTarget = true, timeRange ="30d", onTimeRangeChange,
}: ProductionTrendChartProps) { const [chartType, setChartType] = useState<"line" |"area">("area"); // Generate sample data if none provided const chartData = data || Array.from({ length: 30 }, (_, i) => { const date = subDays(new Date(), 29 - i); return { date: format(date,"MMM dd"), cutting: Math.floor(Math.random() * 200) + 100, printing: Math.floor(Math.random() * 180) + 90, sewing: Math.floor(Math.random() * 160) + 80, finishing: Math.floor(Math.random() * 150) + 70, target: 250, }; }); const exportToCSV = () => { const headers = ["Date","Cutting","Printing","Sewing","Finishing","Target", ]; const csvContent = [ headers.join(","), ...chartData.map(row => [ row.date, row.cutting, row.printing, row.sewing, row.finishing, row.target, ].join(",") ), ].join("\n"); const blob = new Blob([csvContent], { type:"text/csv" }); const url = window.URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = `production-trends-${format(new Date(),"yyyy-MM-dd")}.csv`; a.click(); window.URL.revokeObjectURL(url); if (onExport) onExport(); }; const ChartComponent = chartType ==="area" ? AreaChart : LineChart; return ( <Card className=""> <CardHeader> <div className="flex items-center justify-between"> <div> <CardTitle className="flex items-center gap-2"> <TrendingUp className="h-5 w-5 text-blue-500" /> Production Trends </CardTitle> <CardDescription className=""> Daily production output across all stages </CardDescription> </div> <div className="flex gap-2"> {/* Time Range Selector */} <div className="flex overflow-hidden rounded-md border border-gray-300"> {(["7d","30d","90d"] as const).map(range => ( <button key={range} onClick={() => onTimeRangeChange?.(range)} className={`px-3 py-1.5 text-xs font-medium transition-colors ${ timeRange === range ?"bg-blue-600 text-white" :"bg-white text-gray-700 hover:bg-gray-50" }`} > {range.toUpperCase()} </button> ))} </div> {/* Chart Type Toggle */} <div className="flex overflow-hidden rounded-md border border-gray-300"> <button onClick={() => setChartType("line")} className={`px-3 py-1.5 text-xs font-medium transition-colors ${ chartType ==="line" ?"bg-blue-600 text-white" :"bg-white text-gray-700 hover:bg-gray-50" }`} > Line </button> <button onClick={() => setChartType("area")} className={`px-3 py-1.5 text-xs font-medium transition-colors ${ chartType ==="area" ?"bg-blue-600 text-white" :"bg-white text-gray-700 hover:bg-gray-50" }`} > Area </button> </div> {/* Export Button */} <Button variant="outline" size="sm" onClick={exportToCSV} className="" > <Download className="mr-1 h-4 w-4" /> Export </Button> </div> </div> </CardHeader> <CardContent> <ResponsiveContainer width="100%" height={350}> <ChartComponent data={chartData}> <defs> <linearGradient id="colorCutting" x1="0" y1="0" x2="0" y2="1"> <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8} /> <stop offset="95%" stopColor="#3B82F6" stopOpacity={0.1} /> </linearGradient> <linearGradient id="colorPrinting" x1="0" y1="0" x2="0" y2="1"> <stop offset="5%" stopColor="#10B981" stopOpacity={0.8} /> <stop offset="95%" stopColor="#10B981" stopOpacity={0.1} /> </linearGradient> <linearGradient id="colorSewing" x1="0" y1="0" x2="0" y2="1"> <stop offset="5%" stopColor="#F59E0B" stopOpacity={0.8} /> <stop offset="95%" stopColor="#F59E0B" stopOpacity={0.1} /> </linearGradient> <linearGradient id="colorFinishing" x1="0" y1="0" x2="0" y2="1"> <stop offset="5%" stopColor="#8B5CF6" stopOpacity={0.8} /> <stop offset="95%" stopColor="#8B5CF6" stopOpacity={0.1} /> </linearGradient> </defs> <CartesianGrid strokeDasharray="3 3" stroke="#374151" /> <XAxis dataKey="date" tick={{ fontSize: 11, fill:"#9CA3AF" }} angle={-45} textAnchor="end" height={80} /> <YAxis tick={{ fontSize: 11, fill:"#9CA3AF" }} /> <Tooltip content={<CustomTooltip />} /> <Legend wrapperStyle={{ paddingTop:"10px" }} iconType="circle" /> {chartType ==="area" ? ( <> <Area type="monotone" dataKey="cutting" stroke="#3B82F6" fillOpacity={1} fill="url(#colorCutting)" name="Cutting" strokeWidth={2} /> <Area type="monotone" dataKey="printing" stroke="#10B981" fillOpacity={1} fill="url(#colorPrinting)" name="Printing" strokeWidth={2} /> <Area type="monotone" dataKey="sewing" stroke="#F59E0B" fillOpacity={1} fill="url(#colorSewing)" name="Sewing" strokeWidth={2} /> <Area type="monotone" dataKey="finishing" stroke="#8B5CF6" fillOpacity={1} fill="url(#colorFinishing)" name="Finishing" strokeWidth={2} /> </> ) : ( <> <Line type="monotone" dataKey="cutting" stroke="#3B82F6" name="Cutting" strokeWidth={2} dot={{ r: 3 }} activeDot={{ r: 5 }} /> <Line type="monotone" dataKey="printing" stroke="#10B981" name="Printing" strokeWidth={2} dot={{ r: 3 }} activeDot={{ r: 5 }} /> <Line type="monotone" dataKey="sewing" stroke="#F59E0B" name="Sewing" strokeWidth={2} dot={{ r: 3 }} activeDot={{ r: 5 }} /> <Line type="monotone" dataKey="finishing" stroke="#8B5CF6" name="Finishing" strokeWidth={2} dot={{ r: 3 }} activeDot={{ r: 5 }} /> </> )} {showTarget && ( <Line type="monotone" dataKey="target" stroke="#EF4444" strokeDasharray="5 5" name="Target" strokeWidth={2} dot={false} /> )} </ChartComponent> </ResponsiveContainer> {/* Summary Stats */} <div className="mt-6 grid grid-cols-4 gap-4 border-t border-gray-200 pt-6"> {[ { label:"Cutting", value: chartData[chartData.length - 1]?.cutting || 0, color:"text-blue-600", }, { label:"Printing", value: chartData[chartData.length - 1]?.printing || 0, color:"text-green-600", }, { label:"Sewing", value: chartData[chartData.length - 1]?.sewing || 0, color:"text-yellow-600", }, { label:"Finishing", value: chartData[chartData.length - 1]?.finishing || 0, color:"text-purple-600", }, ].map(stat => ( <div key={stat.label} className="text-center"> <p className="mb-1 text-sm text-gray-500"> {stat.label} </p> <p className={`text-2xl font-bold ${stat.color}`}> {stat.value} </p> <p className="text-xs text-gray-500"> units today </p> </div> ))} </div> </CardContent> </Card> );
}
